/*
Fort Wars
Presented by Elpea, pftq, Matei and TB_Mike
Main Scripter pftq, also some scripting by Matei and TBMike
www.NorseWars.com
www.pftq.com/fortwars

DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! 
DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! 
DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! DO NOT EDIT!!!!!!!!!!!!!!!!!!!!! 

 Fort Wars is known by aoe3.heavengames.com, www.norsewars.com, www.agecommunity.com, www.aoe3files.com, www.agesanctuary.com, www.pftq.com, and many more sites.  Don't be a dumbass! We'll know if this has been editted!

 Violaters will be punished to the greatest extent of the law!

VERSION HISTORY:
[3.2]
-Editted by pftq
- AOE3 TWC 1.02, March 10 2007
- Fixed rare glitch where Portuguese and French players have civ bonus requirements linked together.

[2.3]
- Editted by pftq
- AOE3 patch 1.10, March 10 2007
- Quick adaption of some of the key features from 3.0 and 3.1 of TWC for the 2.x series (AOE3).
- Tower Attack Combined with Building Attack. [3.0]
- Base Fort Attack (affects upgrades) tripled to give slightly better fort. [3.1]
- Building Attack effect doubled. [3.0]
- Buyable Towers removed. [3.0] Replaced with Ranged Rockets (+4 Range and no range penalty).
- Game starts at Age 1 to avoid extra starting techs. [3.0]
- Mortars cost 25 (again). [3.0]
- Instructions revised. [3.1]
- Computer Players automatically move Alain to help skip instructions. [3.1]
- Computer Players automatically spawn infantry units. [3.1]
- Computer Players choose a random choice out of the 3 when they reach an award. [3.1]
- Skip Instructions fixed (broke when Nomad Age introduced) [3.1]
- Island units anti-grouping (ES has autogroup units) effect optimized to reduce load/lag. [3.1]
- Hussar moved down with Uhlans. [3.0]
- Llama scatters units in center every few minutes. [3.1]
- Coin limit on Llama removed and increases indefinitely to 120xp per sec. [3.1]
- Spawn triggers converted to XS and combined using kb functions; ingame lag reduced significantly. [3.1]
- Nomad fixed gun removed. [3.1]
- Nomad 75 coin unit start changed to 50-75 coin units, to add variety. [3.1]
- Llamas in Fort Nomad removed. [3.0]
- Scatter Bear Special added, which scatters units when the bear dies. [3.1]
- Gaining 15000 XP or more in one kill automatically cancels out. [3.1]
- 250 kills award changed from 2 range to 3 range for artillery, 1 building upgrade to 2. [3.1]
- Highlanders cost raised from 8 to 9. [3.1]
- Award text recoded more efficiently. (faster load time) [3.1]
- 1500 kills award: Omniscience (Spies), Revolution (All Spawned Units to Highlanders), Blessing of Arkantos [3.1]
- Spahi cost raised from 6 to 7. [3.1]
- Added return function to automatically move George Crushington and Bolivar away after seeing instructions. [3.1]
- 600 kills award changed from 4 oprichniks to 5 oprichniks. [3.1]
- Age detection enabled and non-Age1 games automatically end. [3.1]
- Ronin gain 500 base HP to reduce vulnerability to Rifler tech. [3.1]
- Super Bolas Warrior cost decreased 60 to 50 coin to boost popularity. [3.1]
- 800 kills award gives 2 bolas instead of 1. [3.1]
- Portuguese bonus changed: ranged infantry get 2/3 attack upgrade every 2 bought; less speed. [3.1]
- Fixed Mortar HP

[3.1]
- Editted by pftq
- AOE3 TWC 1.02, December 26 2006 to March 4 2007
- Dutch merc reverted to Hackepell (was most balanced at that point).
- Mortar HP fixed from being doubled.
- Iroquois Rams cost lowered from 6 to 5 coin.
- Spahi cost raised from 6 to 7.
- Russian reinforcements have Lil' Bombards instead of Great Cannons.
- Age detection enabled and non-Age1 games automatically end.
- Ronin gain 500 base HP to reduce vulnerability to Rifler tech.
- Super Bolas Warrior cost decreased 60 to 50 coin to boost popularity.
- 800 kills award gives 2 bolas instead of 1.
- Computer Players automatically move Alain to help skip instructions.
- Computer Players automatically spawn infantry units.
- Computer Players choose a random choice out of the 3 when they reach an award.
- Skip Instructions fixed (broke when Nomad Age introduced)
- Updated HP stats to those of patch 1.02
- Instructions redone.
- "Revolt" Special added at 50 coin cost, changes units to Outlaw Musketeers.
- 250 kills award changed from 2 range to 3 range for artillery, 1 building upgrade to 2.
- Stopped coin from counting when players are dead.
- Sioux cutoff bonus message fixed.
- French bonus typo fixed.
- Nomad 75 coin unit start changed to 50-75 coin units, to add variety.
- Scatter Bear Special added, which scatters units when the bear dies.
- Base Fort Attack (affects upgrades) tripled to give slightly better fort.
- Llama scatters units in center and resets stealth units to default stance every few minutes.
- 1500 kills award: Omniscience (Spies), Revolution (All Spawned Units to Fusiliers), Blessing of Arkantos
- Gaining 15000 XP or more in one kill automatically cancels out.
- Wardogs disabled
- Nomad fixed gun removed.
- Spawn triggers converted to XS and combined using kb functions; ingame lag reduced significantly.
- Highlanders cost raised from 8 to 9.
- Portuguese bonus changed: ranged infantry get 2/3 attack upgrade every 2 bought; less speed.
- Award text recoded more efficiently. (faster load time)
- Store Island triggers optimized for load time.
- Island units anti-grouping (ES has autogroup units) effect optimized to reduce load/lag.
- Arrowknights removed from spawn.
- Fixed bug where French Oprichniks do not receive HP bonus.
- Iroquois ram HP +50% base and cost made 3 for 12 coin; cavalry get 50% seige boost instead of 25%.
- Aztec Bonus changed to: Spawned Heavy Infantry are faster and have 30% more HP but no Cavalry spawn.
- Aztec Merc changed to: Arrow Knights; reinforcements come with Skull Knights.
- Replaced 7500XP: Special Duration with RR Worker Special, which changes Spawned Units around Buffalo to RR Workers.
- Coin limit on Llama removed and increases indefinitely to 120xp per sec.
- 600 kills award changed from 4 oprichniks to 5 oprichniks.
- Added return function to automatically move George Crushington and Bolivar away after seeing instructions.
- Petards population down to 3 from 5; costchange of 5 coin changed to 3.
- Newly discovered arrays put into use and filesize greatly shortened.
*/
 include "mercenaries.xs"; int _PHQG = 1; int _HUME = 2; int _AYLN = 3; int _LFDX = 4; int _FIRC = 5; int _VSCX = 6; int _GGBW = 7; int _KFNQ = 8; int _MWHH=17; int _QPOX=16; int _WEWN=15; int spawn = 0; int _TKJP = 0; int _REPG = 0; int _GXRP = 0; string _NRVY = ""; int _STMW = 0; int _CYSY=0; int _YCQP=0; int _EVIK=0; int _EFFM=0; float _ZNIM=0; float _KKAS=0; float _VWSR=0; float _ENZK=0; int _YCXF = 0; string _QEOJ=""; int _NZOM=0; string _GDFN=""; int _YYTK=0; int _WWQQ=1; float _TMIU=0.0; string _RXBL=""; string _WQNK=""; float _TZYD=1.0; string _YZVA=""; string _HNKI=""; float _RTWQ=1.0; string _ZHLT=""; int _JQVC=0; int _EBEO=3; int _KVAK=0; int _VLAV=0; int _KSWF=0; int _ZSDB=0; int _VQID=0; int _HTBC=0; int _MPPH=0; int _KUHS=0; int _XORP=0; int _UFWH=0; int _JRUT=0; int _KSSL=0; int _HLRX=0; int _LYDX=0; int _VKOS=0; int _AGGM=0; int _PBGZ=0; int _VBAF=0; int _AZJO=0; int _HQSS=0; int _WTOR=0; int _CKQA=0; int _XSRE=0; int _HNRL=0; int _YJIW=0; int _TMHG=0; int _LKOZ=0; int _FKMM=0; int _XTYV=0; int _OXHF=0; int _KXOP=0; int _VYBJ=0; int _MZOT=0; int xksrc=0; int xxpsrc=0; int Award_SRC=0; int _NTOA = 0; string _OOEF = ""; string _XZBC = ""; int _OEJU = 0; int _VPVA = 0; int _BOYG = 0; int _POEY = 0; string _LFPB = "Skulls"; int _IFIF = 1; string _GIIG="3"; int _QNQR = 25; float _WAUR = 3.333; float _QPMX = 0.75; int _UJJL = 15; int _OWUX = 10; float _WHMS = 0.4; float _NCBX = 0.2; float _COKS = 0.75; int _FZKV = 10; int _ATXD = 10; int _KNLY = 2; string _JYHF = "1.0"; int _IXJS = 20; int _UFNU = 95; float _XXZR = 0.15; int _JURS=50; float aztechp=0.3; float aztecsp=1.5; string _ZBMN = "MercLandsknecht"; string _MGQO = "MercJaeger"; string _OKET = "Spahi"; string _LYHN = "MercBlackRider"; int _KOAU=1; string _GZQR = "SPCFortTower"; string _CDDI = "SPCFortTower"; string _UTEI = "SPCBolivar"; string _OJWA = "NativeHouseCree"; string _YYZP = "GeorgeCrushington"; string _VSCM = "SPCFixedGun"; string _PSAJ = "SPCFixedGunBase"; string _LFVG = "Llama"; string _UBFA = "Horse"; string _AOVL = "SPCBeaumont"; string _ZYLN = "SPCJohn"; string _TRKD = "FortWagon"; string _CPWS = "SPCAlain"; string _RTES = "PropGrassFire"; string _JWHD = "EaglesNest"; string _IZCO = "Campfire"; string _DWVX = "Miner"; string _HRCB = "SPCWhiteBuffalo"; string _JPCG = "IGCMusketeer"; string _LDVG = "MercSwissPikeman"; string _YLWG = "MercHighlander"; string _BUSB = "MercLandsknecht"; string _MBOR = "MercMameluke"; string _XTLH = "MercHackapell"; string _CSMP = "MercJaeger"; string _XOHG = "MercManchu"; string _MGNK = "Spahi"; string _QGSC = "xpDogSoldier"; string mercAztec = "xpArrowKnight"; string _MIKD = "xpRam"; string _EUFD = "Cannon"; string _XOTO = "Rocket"; string _GBGX = "Cannon"; string _PEYA = "OrganGun"; string _NFET = "Cannon"; string _CUKE = "MercGreatCannon"; string _PZSH = "Cannon"; string _KLJU = "GreatBombard"; string _WICK = "xpLightCannon"; string ReAztec = "xpSkullKnight"; float _GGGE = 0; float _KJDQ = 0; float _ZJEN = 0; float _PEVQ = 0; float _GXIE = 0.15; float _PJSR = 0.85; int _DZJA = 0; string _ZUJL = ""; int _LCHH = 100; int _BFQM = 4; int _RFFV = 100; int _ZOBI = 8; float _WYBX = 30.0; float _DUUN = 1.25; int _FSKS = 10; int _RSRT = 10; int fortatk=3; int _EKMQ = 3; int _DCYZ = 10; int _JEEU=1800; int _HMSR=25000; int _QCOZ=400; int _IJIP=80; int _FION = 5; int _EEDD = 5; int _PSZR = 5; float _NAVY = 7.5; string _MMTA = "-0.3*"; string _TBDZ = "0.3*"; string _QSOE = "0.3"; int _MUVN=1; int _AIHF = 180; int _SHCC = 300; float _OWKV=1.0; int _OSRJ = 2; int instructionsnum = 20; int _MCNL=270; int _HQOD=330; string _WHBV="pftq"; string _SSII="Matei"; string _GVIJ="TBMike"; string _SUXI="Elpea"; int _PPPS = 160; string _UACB(int _AZUX=0, string _MHEC="All") { if(_MHEC=="All"||_MHEC=="Native") { if(_AZUX==2) return("NatAxeRiderDogSoldier"); if(_AZUX==6) return("NatBolasWarrior"); if(_AZUX==8) return("NatClubmanLoyal"); if(_AZUX==17) return("NatTomahawk"); } if(_MHEC=="All"||_MHEC=="Misc"||_MHEC=="Soldier"||_MHEC=="Reg") { if(_MHEC!="Soldier") { if(_MHEC!="Reg") { if(_AZUX==33) return("GeorgeCrushington"); if(_AZUX==34) return("Learicorn"); if(_AZUX==32) return("PetGrizzly"); if(_AZUX==35) return("SPCWhiteBuffalo"); } } } if(_MHEC=="All"||_MHEC=="Artillery"||_MHEC=="Soldier"||_MHEC=="Reg"||_MHEC=="Spawn"||_MHEC=="Cannons"||_MHEC=="HeavyArt") { if(_MHEC!="Cannons"&&_MHEC!="HeavyArt") { if(_AZUX==51) return("Grenadier"); if(_MHEC!="Spawn") { if(_AZUX==66) return("SPCRailroadWorker"); if(_AZUX==64) return ("xpPetard"); if(_AZUX==66) return("xpRam"); } } if(_MHEC!="HeavyArt") { if(_AZUX==52) return("Culverin"); if(_MHEC!="Spawn") if(_AZUX==53) return("Mortar"); if(_AZUX==54) return("OrganGun"); if(_AZUX==59) return("Falconet"); if(_AZUX==61) return("xpHorseArtillery"); if(_AZUX==62) return("xpLightCannon"); if(_AZUX==63) return("xpGatlingGun"); } if(_AZUX==55) return("GreatBombard"); if(_AZUX==56) return("Rocket"); if(_AZUX==57) return("Cannon"); if(_AZUX==60) return("MediocreBombard"); if(_MHEC!="Spawn") { if(_AZUX==58) return("RussianCannon"); if(_AZUX==67) return("MercGreatCannon"); } } if(_MHEC=="All"||_MHEC=="HInf"||_MHEC=="Soldier"||_MHEC=="Reg"||_MHEC=="Spawn"||_MHEC=="Inf"||_MHEC=="Explorer") { if(_MHEC!="Spawn") { if(_AZUX==78) return("xpAztecWarchief"); if(_AZUX==79) return("xpIroquoisWarchief"); } if(_MHEC!="Explorer") { if(_AZUX==71) return("Rodelero"); if(_AZUX==72) return("Pikeman"); if(_AZUX==73) return("Halberdier"); if(_AZUX==74) return("Musketeer"); if(_AZUX==75) return("Dopplesoldner"); if(_AZUX==76) return("Janissary"); if(_AZUX==77) return("xpJaguarKnight"); if(_AZUX==80) return("xpPumaMan"); if(_AZUX==151) return("xpSkullKnight"); if(_AZUX==152) return("xpWarClub"); if(_MHEC!="Spawn") { if(_AZUX==153) return("xpColonialMilitia"); if(_AZUX==154) return("OutlawMusketeer"); } } } if(_MHEC=="All"||_MHEC=="LInf"||_MHEC=="Soldier"||_MHEC=="Reg"||_MHEC=="Spawn"||_MHEC=="Inf") { if(_AZUX==81) return("Strelet"); if(_AZUX==82) return("Longbowman"); if(_AZUX==83) return("Skirmisher"); if(_AZUX==84) return("Cacadore"); if(_AZUX==85) return("AbusGun"); if(_MHEC!="Spawn") if(_AZUX==86) return("xpArrowKnight"); if(_AZUX==87) return("xpWarBow"); if(_AZUX==88) return("xpAenna"); if(_AZUX==89) return("xpMusketWarrior"); } if(_MHEC=="All"||_MHEC=="HCav"||_MHEC=="Soldier"||_MHEC=="Reg"||_MHEC=="Spawn"||_MHEC=="Explorer") { if(_MHEC!="Spawn") { if(_AZUX==98) return("xpLakotaWarchief"); } if(_MHEC!="Explorer") { if(_AZUX==91) return("Cossack"); if(_AZUX==92) return("Uhlan"); if(_AZUX==93) return("Hussar"); if(_AZUX==94) return("Cuirassier"); if(_AZUX==95) return("Lancer"); if(_AZUX==96) return("xpAxeRider"); if(_AZUX==97) return("xpCoupRider"); if(_AZUX==99) return("xpHorseman"); } } if(_MHEC=="All"||_MHEC=="LCav"||_MHEC=="Soldier"||_MHEC=="Reg"||_MHEC=="Spawn") { if(_AZUX==101) return("Ruyter"); if(_AZUX==102) return("CavalryArcher"); if(_AZUX==103) return("Dragoon"); if(_AZUX==104) return("WarWagon"); if(_AZUX==105) return("xpRifleRider"); if(_AZUX==106) return("xpBowRider"); if(_AZUX==107) return("xpMusketRider"); } if(_MHEC=="All"||_MHEC=="Uber") { if(_AZUX==111) return("MercRonin"); if(_AZUX==112) return("Oprichnik"); if(_AZUX==113) return("Crossbowman"); } if(_MHEC=="All"||_MHEC=="Healer"||_MHEC=="Reg"||_MHEC=="Other") { if(_AZUX==122) return("Surgeon"); } if(_MHEC=="All"||_MHEC=="Settler"||_MHEC=="Reg"||_MHEC=="Other") { if(_AZUX==133) return("OutpostWagon"); } if(_MHEC=="All"||_MHEC=="Merc"||_MHEC=="Reg") { if(_AZUX==136) return("MercHighlander"); if(_AZUX==137) return("MercLandsknecht"); if(_AZUX==138) return("MercJaeger"); if(_AZUX==139) return("MercHackapell"); if(_AZUX==140) return("MercSwissPikeman"); if(_AZUX==141) return("MercManchu"); if(_AZUX==143) return("MercFusilier"); if(_AZUX==144) return("Spahi"); if(_AZUX==145) return("MercMameluke"); if(_AZUX==146) return("MercBlackRider"); if(_AZUX==147) return("xpDogSoldier"); } return(""); } int _THLE = 524; int _FROT=1609; int _UJZU=1075; int _OXYT=240; int _JBBH=364; int _RVQT=963; int _VPPA=985; int _VQNQ = 228;int _OGVL=149; int _SNHH=314; int _PYNZ=1077; int _MIGO=1078; int _HGXP = 165; int _XXMN=528; int _QTIH=174; int NatLacrosse=202; int _TCJT = 522; int _NOCK=294; int _OTHO=316; int _HZRI=229; int _RXBG=443; int _FCBC=957; int _XHUU=334; int _ZTSJ=272; int _DKUZ=5; int _FHWB=1494; int _NZXU=464; int _FPPY=1619; int _EQZN=1267; int _ANNY=303; int _EYHJ = 0; int _UGIX(void) { _EYHJ = _EYHJ + 1; return(_EYHJ); } float _WTBV(float x = 0) { if(x<0) return(0 - x); return(x); } float _TREH(float x=0, float _BBCP=0) { return (rmXTilesToFraction(rmXFractionToTiles(x) + (_WTBV(_BBCP))*(_BBCP/_WTBV(_BBCP)))); } float _XIFB(float z=0, float _BBCP=0) { return (rmZTilesToFraction(rmZFractionToTiles(z) + (_WTBV(_BBCP))*(_BBCP/_WTBV(_BBCP)))); } void _HCUY(string _YFWP="", int prior=0, string _JSFY="", string _BGLG="", string _ZMBI="") { rmSwitchToTrigger(rmTriggerID(_YFWP)); if(_JSFY=="Active"||_BGLG=="Active"||_ZMBI=="Active") rmSetTriggerActive(true); if(_JSFY!="Active"&&_BGLG!="Active"&&_ZMBI!="Active") rmSetTriggerActive(false); if(prior!=0) rmSetTriggerPriority(prior); if(_JSFY=="Run"||_BGLG=="Run"||_ZMBI=="Run") rmSetTriggerRunImmediately(true); if(_JSFY=="Loop"||_BGLG=="Loop"||_ZMBI=="Loop") rmSetTriggerLoop(true); } void _XVFB() { rmSwitchToTrigger(rmCreateTrigger("_KKFL"+_UGIX())); rmSetTriggerActive(false); rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "\"); }} /*", false); } void _CGKC() { rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "*/ rule _globals_end_"+_UGIX()+" minInterval 4 inactive { if (1==0) { trChatSend(0, \"", false); } void _FQCK(string _COTZ="") { rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "*/"+_COTZ+"/*", false); } int _GWHR(int army=0, int _ELJY=0) { return(xsArrayGetInt(army, _ELJY)); } float _OQKH(int army=0, int _ELJY=0) { return(xsArrayGetFloat(army, _ELJY)); } string _WUDB(int army=0, int _ELJY=0) { return(xsArrayGetString(army, _ELJY)); } void _CIHP(int army=0, int _ACCL=0, int _ELJY=0) { xsArraySetInt(army, _ACCL, _ELJY); } void _QWAQ(int army=0, int _ACCL=0, float _ELJY=0) { xsArraySetFloat(army, _ACCL, _ELJY); } void _ZXUG(int army=0, int _ACCL=0, string _ELJY="") { xsArraySetString(army, _ACCL, _ELJY); } float PI = 3.1415926535897932384626433832795; float pow(float x = 0,int p = 0) { float x2 = 1; float x4 = 1; float x8 = 1; float x16 = 1; float x32 = 1; float x64 = 1; if(p>=2) x2 = x*x; if(p>=4) x4 = x2*x2; if(p>=8) x8 = x4*x4; if(p>=16) x16 = x8*x8; if(p>=32) x32 = x16*x16; if(p>=64) x64 = x32*x32; float ret = 1; while(p>=64) { ret = ret * x64; p = p - 64; } if(p>=32) { ret = ret * x32; p = p - 32; } if(p>=16) { ret = ret * x16; p = p - 16; } if(p>=8) { ret = ret * x8; p = p - 8; } if(p>=4) { ret = ret * x4; p = p - 4; } if(p>=2) { ret = ret * x2; p = p - 2; } if(p>=1) { ret = ret * x; p = p - 1; } return (ret); } float atan(float n = 0) { float m = n; if(n > 1) m = 1.0 / n; if(n < -1) m = -1.0 / n; float r = m; for(i = 1; < 100) { int j = i * 2 + 1; float k = pow(m,j) / j; if(k == 0) break; if(i % 2 == 0) r = r + k; if(i % 2 == 1) r = r - k; } if(n > 1 || n < -1) r = PI / 2.0 - r; if(n < -1) r = 0.0 - r; return (r); } float atan2(float z = 0,float x = 0) { if(x > 0) return (atan(z / x)); if(x < 0) { if(z < 0) return (atan(z / x) - PI); if(z > 0) return (atan(z / x) + PI); return (PI); } if(z > 0) return (PI / 2.0); if(z < 0) return (0.0 - (PI / 2.0)); return (0); } float factorial(float n = 0) { float r = 1; for(i = 2; <= n) { r = r * i; } return (r); } float cos(float n = 0) { float r = 1; for(i = 1; < 100) { int j = i * 2; float k = pow(n,j) / factorial(j); if(k == 0) break; if(i % 2 == 0) r = r + k; if(i % 2 == 1) r = r - k; } return (r); } float sin(float n = 0) { float r = n; for(i = 1; < 100) { int j = i * 2 + 1; float k = pow(n,j) / factorial(j); if(k == 0) break; if(i % 2 == 0) r = r + k; if(i % 2 == 1) r = r - k; } return (r); } int _FXWW(float x=0, float z=0, float _DKJG=0, int _KMFX=2, float _DYYG=1, int _MDCA=-1) { int _SZSG = 0; if(_MDCA>-1) _SZSG = rmCreateArea("area"+_UGIX(), _MDCA); else _SZSG = rmCreateArea("area"+_UGIX()); rmSetAreaHeightBlend(_SZSG, _KMFX); if(x>-1 && z>-1) rmSetAreaLocation(_SZSG, x, z); rmSetAreaSize(_SZSG, _DKJG, _DKJG); rmSetAreaCoherence(_SZSG, _DYYG); return (_SZSG); } int _OVSO(float x1=0, float z1=0, float x2=0, float z2=0, float _DKJG=0, string _HCWM="", int _BMXR=-1, int _KMFX=2, string _MHEC="Terrain") { int _SZSG = _FXWW(x1, z1, _DKJG, _KMFX, 1); rmAddAreaInfluenceSegment(_SZSG, x1, z1, x2, z2); if(_BMXR!=-1) rmSetAreaBaseHeight(_SZSG, _BMXR); if(_MHEC=="Terrain") {rmSetAreaTerrainType(_SZSG, _HCWM);} if(_MHEC=="Mix") {rmSetAreaMix(_SZSG, _HCWM);} return (_SZSG); } void _MHUY(string _HCWM = "", string type="Terrain") { float x = 0.0; float z = 0.0; float r1 = rmXTilesToFraction(10); float r2 = rmXTilesToFraction(3); float _FYQG = rmRandFloat(0,2.0*PI); while(x<10) { z = -0.5; while(z<=0.5) { _OVSO(0.5+r1*cos(_FYQG+ x/10.1*2*PI), 0.5+r1*sin(_FYQG+ x/10.1*2*PI), 0.5+r2*cos(_FYQG+ (x+z)/10.1*2*PI), 0.5+r2*sin(_FYQG+ (x+z)/10.1*2*PI), rmAreaTilesToFraction(10), _HCWM, -1, 2, type); z = z + 0.2; } x = x + 1.0; } int _SZSG = _FXWW(0.5, 0.5, rmAreaTilesToFraction(50)); if(type=="Terrain") {rmSetAreaTerrainType(_SZSG, _HCWM);} if(type=="Mix") {rmSetAreaMix(_SZSG, _HCWM);} rmBuildAllAreas(); } int var1=0; int var2=0; int var3=0; int var4=0; int var5=0; int var6=0; int var7=0; int var8=0; int var9=0; int var10=0; string _ZVHH=""; string _BPGU=""; string _GWGN=""; float _LVBY=0.0; float _PECJ=0.0; float _EIWW=0.0; float _STNE=0.0; float _UIQU=0.0; void _SVKN(int _HKWJ=0, string _OPMM="", int _LEBK=0, int _SUCV=0) { _ZXUG(_KUHS, _HKWJ, _OPMM); _CIHP(_XORP, _HKWJ, _LEBK); _CIHP(_UFWH, _HKWJ, _SUCV); _HCUY("_DWSO"); _FQCK("if(name==\""+_OPMM+"\") return("+_LEBK+");"); _HCUY("_VHZT"); _FQCK("if(name==\""+_OPMM+"\") return("+_SUCV+");"); } void _ZQLY(int _HKWJ=0, string _OPMM="", int _LEBK=0, int _SUCV=0) { _ZXUG(_JRUT, _HKWJ, _OPMM); _CIHP(_KSSL, _HKWJ, _LEBK); _CIHP(_HLRX, _HKWJ, _SUCV); _HCUY("_DWSO"); _FQCK("if(name==\""+_OPMM+"\") return("+_LEBK+");"); _HCUY("_VHZT"); _FQCK("if(name==\""+_OPMM+"\") return("+_SUCV+");"); } void _QNWC(int _HKWJ=0, string _OPMM="", int _LEBK=0, int _SUCV=0) { _ZXUG(_LYDX, _HKWJ, _OPMM); _CIHP(_VKOS, _HKWJ, _LEBK); _CIHP(_AGGM, _HKWJ, _SUCV); _HCUY("_DWSO"); _FQCK("if(name==\""+_OPMM+"\") return("+_LEBK+");"); _HCUY("_VHZT"); _FQCK("if(name==\""+_OPMM+"\") return("+_SUCV+");"); } void _MBVB(int _HKWJ=0, string _OPMM="", int _LEBK=0, int _SUCV=0) { _ZXUG(_PBGZ, _HKWJ, _OPMM); _CIHP(_VBAF, _HKWJ, _LEBK); _CIHP(_AZJO, _HKWJ, _SUCV); _HCUY("_DWSO"); _FQCK("if(name==\""+_OPMM+"\") return("+_LEBK+");"); _HCUY("_VHZT"); _FQCK("if(name==\""+_OPMM+"\") return("+_SUCV+");"); } void _HRML(int _HKWJ=0, string _OPMM="", int _LEBK=0, int _SUCV=0) { _ZXUG(_HQSS, _HKWJ, _OPMM); _CIHP(_WTOR, _HKWJ, _LEBK); _CIHP(_CKQA, _HKWJ, _SUCV); _HCUY("_DWSO"); _FQCK("if(name==\""+_OPMM+"\") return("+_LEBK+");"); _HCUY("_VHZT"); _FQCK("if(name==\""+_OPMM+"\") return("+_SUCV+");"); } void _ABJR(int i=0, string _MHEC="") { int _ZOXH=12; int _ZUBD=12; int tox=0; int toz=0; if(_RXBL=="") { if(_MHEC=="Reg") { tox=40; toz=40; } if(_MHEC=="Special") { tox=20; toz=20; } if(_MHEC=="SuperSpecial") { tox=0; toz=0; } } if(_RXBL=="tiny") { if(_MHEC=="Reg") { tox=25; toz=25; } if(_MHEC=="Special") { tox=10; toz=10; } if(_MHEC=="SuperSpecial") { tox=0; toz=0; } } _GGGE = (rmPlayerLocXFraction(i)-0.5)*(0.5 + rmXTilesToFraction(_ZOXH))/0.5+0.5; _KJDQ = (rmPlayerLocZFraction(i)-0.5)*(0.5 + rmZTilesToFraction(_ZUBD))/0.5+0.5; _ZJEN = (rmPlayerLocXFraction(i)-0.5)*(0.5 + rmXTilesToFraction(tox))/0.75+0.5; _PEVQ = (rmPlayerLocZFraction(i)-0.5)*(0.5 + rmZTilesToFraction(toz))/0.75+0.5; } string _RXIB = "<icon=(20)(ui\hp_cp\hp_cp_rec_gold)> "; string _EXXY = "<icon=(20)(ui\command\generate_food_off)> "; string _FVSD = "<icon=(20)(ui\command\generate_wood_off)> "; string _DYGT = "<icon=(20)(ui\command\generate_coin_off)> "; void _FCIE(string _BDUT="") { rmAddTriggerEffect(_BDUT); } void _OEUN(string _BDUT="") { rmAddTriggerCondition(_BDUT); } void _FHDA(string _BDUT="", string _ACCL="") { rmSetTriggerEffectParam(_BDUT, _ACCL); } void _XPHB(string _BDUT="", int _ACCL=0) { rmSetTriggerEffectParamInt(_BDUT, _ACCL); } void _SYWZ(string _BDUT="", float _ACCL=0.0) { rmSetTriggerEffectParamFloat(_BDUT, _ACCL); } void _TPWJ(string _BDUT="", string _ACCL="") { rmSetTriggerConditionParam(_BDUT, _ACCL); } void _NGJN(string _BDUT="", int _ACCL=0) { rmSetTriggerConditionParamInt(_BDUT, _ACCL); } void _QDXG(string xs="") { _FCIE("SetIdleProcessing"); _FHDA("IdleProc", "true); "+xs+" trSetUnitIdleProcessing(true"); } void _NTAT(string _TNHO="", int _DTON=0, int _PYZW=0, string _OTKG="") { _FCIE("Modify Protounit"); _FHDA("ProtoUnit", _TNHO); _XPHB("PlayerID", _DTON); _XPHB("Field", _PYZW); _FHDA("Delta", _OTKG); } void _NGUP(string _TNHO="", int _PYZW=0, float _OTKG=0) { for(i=1;<=cNumberNonGaiaPlayers) { _FCIE("Modify Protounit"); _FHDA("ProtoUnit", _TNHO); _XPHB("PlayerID", i); _XPHB("Field", _PYZW); _SYWZ("Delta", -1*_OTKG); } } void _HPKX(string _EATO="", string _WZAB="") { _FCIE("Quest Var Set"); _FHDA("QVName", _EATO); _FHDA("Value", _WZAB); } void _SDNV(string _EATO="", string _QHKF="", string _WZAB="") { _OEUN("Quest Var Check"); _TPWJ("QuestVar", _EATO); _TPWJ("Op", _QHKF); _TPWJ("Value", _WZAB); } void _CMOF(string _EATO="", string _QHKF="", string _WZAB="") { _FCIE("Quest Var Modify"); _FHDA("QVName", _EATO); _FHDA("Oper", _QHKF); _FHDA("Value", _WZAB); } void _ISFR(string _EATO="", string _QHKF="", string nameQV2="") { _FCIE("Quest Var Modify 2"); _FHDA("QVName", _EATO); _FHDA("Oper", _QHKF); _FHDA("QVName2", nameQV2); } void _FQGV(int _PMVO=0, string _RPJF="") { _FCIE("Send Chat"); _XPHB("PlayerID", _PMVO); _FHDA("Message", _RPJF); } void _ZSLZ(int _PMVO=0, string _RPJF="") { _FCIE("Send Chat To Player"); _XPHB("PlayerID", 0); _XPHB("ToPlayerID", _PMVO); _FHDA("Message", _RPJF); } void _MPJJ(string _NEHR="") { _FCIE("Fire Event"); _XPHB("EventID", rmTriggerID(_NEHR)); } void _YKXJ(int _PMVO=0, string _ZUBU="", string _ACCL="") { _FCIE("Grant Resources"); _XPHB("PlayerID", _PMVO); _FHDA("ResName", _ZUBU); _FHDA("Amount", _ACCL); } void _FKCY(int _PMVO=0, string _ZUBU="", string _ZOBG="", string _ACCL="") { _OEUN("Player Resource Count"); _NGJN("PlayerID", _PMVO); _TPWJ("Resource", _ZUBU); _TPWJ("Op", _ZOBG); _TPWJ("Count", _ACCL); } void _HTUO(float _XRAJ=0.0) { _OEUN("Timer"); _TPWJ("Param1", ""+_XRAJ); } void _VPRE(string _XRAJ="0") { _OEUN("Timer"); _TPWJ("Param1", _XRAJ); } void _CWGX(string _XPSW="", string _CGMM="") { _FCIE("Sound Filename"); _FHDA("Sound", _XPSW); _XPHB("EventID", rmTriggerID(_CGMM)); } void _VEDE(int _WDMF=0, string _NQWC="") { for(i=1;<=cNumberNonGaiaPlayers) { _FCIE("Set Tech Status"); _FHDA("PlayerID", ""+i); _XPHB("TechID", _WDMF); if(_NQWC=="Unobtainable") {_XPHB("Status", 0);} if(_NQWC=="Active") {_XPHB("Status", 2);} } } void _UQDS(int _CILI=0, int _WDMF=0, string status="") { _FCIE("Set Tech Status"); _FHDA("PlayerID", ""+_CILI); _XPHB("TechID", _WDMF); if(status=="Unobtainable") {_XPHB("Status", 0);} if(status=="Active") {_XPHB("Status", 2);} } void _QECI(int _CILI=0, int _WDMF=0, int _DUUV=0) { if(_DUUV!=1) _QDXG("for(i=1;<="+_DUUV+") {"); _UQDS(_CILI, _WDMF, "Unobtainable"); _UQDS(_CILI, _WDMF, "Active"); if(_DUUV!=1) _QDXG("}"); } void _HLUI(int _CILI=0, int _LGMF=0, int _CSWT=0, int _WKKX=0, int _LCBH=0, int _QKVC=0, int _SWJE=0, int _BKRJ=0, int _LPGF=0, int _GRAT=0, int _ZBSG=0) { _UQDS(_CILI, _LGMF, "Active"); if(_CSWT!=0) {_UQDS(_CILI, _CSWT, "Active");} if(_WKKX!=0) {_UQDS(_CILI, _WKKX, "Active");} if(_LCBH!=0) {_UQDS(_CILI, _LCBH, "Active");} if(_QKVC!=0) {_UQDS(_CILI, _QKVC, "Active");} if(_SWJE!=0) {_UQDS(_CILI, _SWJE, "Active");} if(_BKRJ!=0) {_UQDS(_CILI, _BKRJ, "Active");} if(_LPGF!=0) {_UQDS(_CILI, _LPGF, "Active");} if(_GRAT!=0) {_UQDS(_CILI, _GRAT, "Active");} if(_ZBSG!=0) {_UQDS(_CILI, _ZBSG, "Active");} } void _UVZI(int _CILI=0, int _LGMF=0, int _CSWT=0, int _WKKX=0, int _LCBH=0, int _QKVC=0, int _SWJE=0, int _BKRJ=0, int _LPGF=0, int _GRAT=0, int _ZBSG=0) { _UQDS(_CILI, _LGMF, "Unobtainable"); if(_CSWT!=0) {_UQDS(_CILI, _CSWT, "Unobtainable");} if(_WKKX!=0) {_UQDS(_CILI, _WKKX, "Unobtainable");} if(_LCBH!=0) {_UQDS(_CILI, _LCBH, "Unobtainable");} if(_QKVC!=0) {_UQDS(_CILI, _QKVC, "Unobtainable");} if(_SWJE!=0) {_UQDS(_CILI, _SWJE, "Unobtainable");} if(_BKRJ!=0) {_UQDS(_CILI, _BKRJ, "Unobtainable");} if(_LPGF!=0) {_UQDS(_CILI, _LPGF, "Unobtainable");} if(_GRAT!=0) {_UQDS(_CILI, _GRAT, "Unobtainable");} if(_ZBSG!=0) {_UQDS(_CILI, _ZBSG, "Unobtainable");} } void _SHQL(string _TNHO="", int _PYZW=0, float _OTKG=0) { _FQCK("trModifyProtounit(\""+_TNHO+"\", p, "+_PYZW+", -"+_OTKG+");"); } void _FNHY(string _EATO="", string _WZAB="") { _FQCK("_HPKX(\""+_EATO+"\", "+_WZAB+");"); } void _XWJS(string _EATO="", string _QHKF="", string _WZAB="") { _FQCK("_HPKX(\""+_EATO+"\", _SDNV(\""+_EATO+"\")"+_QHKF+""+_WZAB+");"); } void _KWDE(string _EATO="", string _QHKF="", string _WZAB="") { _FQCK("_HPKX(\""+_EATO+"\", _SDNV(\""+_EATO+"\") "+_QHKF+" _SDNV(\""+_WZAB+"\"));"); } void _JAVW(string _TNHO="", int _PYZW=0, string _OTKG="") { _FQCK("trModifyProtounit(\""+_TNHO+"\", p, "+_PYZW+", "+_OTKG+");"); } void _AUXP(int _WDMF=0, string status="") { int statusNum = 0; if(status == "Active") {statusNum = 2;} _FQCK("trTechSetStatus(p, "+_WDMF+", "+statusNum+");"); } void _ANNA(int _WDMF=0, string _DUUV="") { _FQCK("for(i=1;<="+_DUUV+") {"); _AUXP(_WDMF, "Unobtainable"); _AUXP(_WDMF, "Active"); _FQCK("}"); } void _MXJD(int _LGMF=0, int _CSWT=0, int _WKKX=0, int _LCBH=0, int _QKVC=0, int _SWJE=0, int _BKRJ=0, int _LPGF=0, int _GRAT=0, int _ZBSG=0) { _AUXP(_LGMF, "Active"); if(_CSWT!=0) {_AUXP(_CSWT, "Active");} if(_WKKX!=0) {_AUXP(_WKKX, "Active");} if(_LCBH!=0) {_AUXP(_LCBH, "Active");} if(_QKVC!=0) {_AUXP(_QKVC, "Active");} if(_SWJE!=0) {_AUXP(_SWJE, "Active");} if(_BKRJ!=0) {_AUXP(_BKRJ, "Active");} if(_LPGF!=0) {_AUXP(_LPGF, "Active");} if(_GRAT!=0) {_AUXP(_GRAT, "Active");} if(_ZBSG!=0) {_AUXP(_ZBSG, "Active");} } void _VZUH(int _LGMF=0, int _CSWT=0, int _WKKX=0, int _LCBH=0, int _QKVC=0, int _SWJE=0, int _BKRJ=0, int _LPGF=0, int _GRAT=0, int _ZBSG=0) { _AUXP(_LGMF, "Unobtainable"); if(_CSWT!=0) {_AUXP(_CSWT, "Unobtainable");} if(_WKKX!=0) {_AUXP(_WKKX, "Unobtainable");} if(_LCBH!=0) {_AUXP(_LCBH, "Unobtainable");} if(_QKVC!=0) {_AUXP(_QKVC, "Unobtainable");} if(_SWJE!=0) {_AUXP(_SWJE, "Unobtainable");} if(_BKRJ!=0) {_AUXP(_BKRJ, "Unobtainable");} if(_LPGF!=0) {_AUXP(_LPGF, "Unobtainable");} if(_GRAT!=0) {_AUXP(_GRAT, "Unobtainable");} if(_ZBSG!=0) {_AUXP(_ZBSG, "Unobtainable");} } string _HUSL=""; string _RKVW=""; void Upgstat(string upgtypex="") { _HUSL=""; _RKVW=""; if(upgtypex=="Attack") { _HUSL=_AOVL; _RKVW="SPCWashington"; } if(upgtypex=="HP") { _HUSL=_ZYLN; _RKVW="SPCMorgan"; } if(upgtypex=="Speed") { _HUSL=_UBFA; _RKVW="Learicorn"; } if(upgtypex=="LOS") _HUSL="NativeScout"; if(upgtypex=="BuildingHP") _HUSL="FortWagon"; if(upgtypex=="BuildingAttack") _HUSL="SPCHoopthrowers"; } void _NACZ(string _YHEP="", string _WZOL="") { Upgstat(_YHEP); _XWJS(_YHEP+"Upg\"+p+\"", "+", _WZOL); if(_HUSL!="") _JAVW(_HUSL, 18, _WZOL); if(_RKVW!="") _JAVW(_RKVW, 18, _WZOL); } void _CCEF(string _JVBV="") { _FQCK("trChatSendToPlayer(0, p, \""+_JVBV+"\");"); } void _PNVG(int i=0, string _YHEP="", string _WZOL="") { Upgstat(_YHEP); _CMOF(_YHEP+"Upg"+i, "+", _WZOL); if(_HUSL!="") _NTAT(_HUSL, i, 18, _WZOL); if(_RKVW!="") _NTAT(_RKVW, i, 18, _WZOL); } void _ZMII(int _ZWUD=0, int _WDFZ=0, string _MHEC="", int _DUUV=0, int _LKTB =0) { _FCIE("Army Deploy"); rmSetTriggerEffectParamArmy("SrcArmy", _ZWUD, _WDFZ); _FHDA("ProtoName", _MHEC); _FHDA("Location", rmXFractionToMeters(_GGGE)+",1,"+rmZFractionToMeters(_KJDQ)); _FHDA("Count", ""+_DUUV); _XPHB("Heading", 0); if(_LKTB==0) {_FHDA("Clear", "true");} if(_LKTB==1) {_FHDA("Clear", "false");} _FCIE("Army Move"); rmSetTriggerEffectParamArmy("SrcArmy", _ZWUD, _WDFZ); _FHDA("DstPoint", rmXFractionToMeters(_ZJEN)+",1,"+rmZFractionToMeters(_PEVQ)); _FHDA("AttackMove", "true"); } void _WNDQ(int p=0) { _QDXG("_XSKY("+p+", "+rmXFractionToMeters(_OQKH(_KVAK, p))+", "+rmZFractionToMeters(_OQKH(_VLAV, p))+", 20);"); } void _NSKW(int p=0) { _QDXG("_XSKY("+p+", "+rmXFractionToMeters(_OQKH(_KSWF, p))+", "+rmZFractionToMeters(_OQKH(_ZSDB, p))+", 15);"); } void _YYIU(string _DSJV="", string _EZKM="0", string _ESBJ="0", string _LKYE="", string _RTAH="") { _FCIE("Counter:Add Timer"); _FHDA("Name", _DSJV); _FHDA("Start", _EZKM); _FHDA("Stop", _ESBJ); _FHDA("Msg", _LKYE); _XPHB("Event", rmTriggerID(_RTAH)); } void _NEXH(string _UQMJ="", float _ICBM=0, float _USQD=-1, float _KLAS=-1, float _OLWJ=3000, string _XPTX="None") { _FCIE("Overlay Text"); _FHDA("Text", _UQMJ); _FHDA("Duration", ""+_ICBM); _FHDA("PosX", ""+_USQD); _FHDA("PosY", ""+_KLAS); _FHDA("Width", ""+_OLWJ); _FHDA("Background", ""+_XPTX); } void _XEUM(int _ZFWY=0, int _CILI=0, string _UCPA="", string _BQSE="0", string _FFUN="==", string _TCDL="0") { _OEUN("Units in Area"); _NGJN("DstObject", _ZFWY); _TPWJ("Player", ""+_CILI); _TPWJ("UnitType", _UCPA); _TPWJ("Dist", _BQSE); _TPWJ("Op", _FFUN); _TPWJ("Count", _TCDL); } void _NNBE(int _CILI=0, string _UCPA="", string _FFUN="==", string _TCDL="0") { _OEUN("Player Unit Count"); _NGJN("PlayerID", _CILI); _TPWJ("ProtoUnit", _UCPA); _TPWJ("Op", _FFUN); _TPWJ("Count", _TCDL); } void _LXZI(string _PODI="", string _ISPQ="0") { _FCIE("Music Filename"); _FHDA("Music", _PODI); _FHDA("Duration", _ISPQ); } void _OMDX(string _UQBY="0", string _VECM="0", string _PESR="0,0,0") { _FCIE("Flare Minimap"); _FHDA("PlayerID", _UQBY); _FHDA("Duration", _VECM); _FHDA("Position", _PESR); } void _LLUB(string _UQBY="", string _VECM="0") { _FCIE("Flash Units"); _FHDA("SrcObject", _UQBY); _FHDA("Duration", _VECM); } void _RYYE(string _UQBY="", string _VECM="") { _FCIE("Change Unit Type"); _FHDA("SrcObject", _UQBY); _FHDA("ProtoUnit", _VECM); } void _THYN(int vlarg=0) { _QDXG("trUnitSelectClear(); trUnitSelect(\"\"+"+vlarg+");"); } string _CBBC = "<color=1,0.8,0.2>"; string _JLSO(int _CILI=0) { return(rmGetPlayerName(_CILI)); } string _ICAA="p"; string _HMKW="e"; string _YWTT="q"; string _JZPP="t"; string _KWLB="l"; string _MJAH="f"; string _TPUT="a"; string _IEBP="M"; string _BBMU="E"; string _EGYR="i"; string _HLTH="T"; string _XWGJ="k"; string _PRWV="B"; string _HSHZ="F"; string _YAVQ="o"; string _YECZ="r"; string _TOZO="W"; string _XJWZ="w"; string _ABNA="s"; string _HTBR="b"; string _RRLL="y"; string _KTCH="x"; string _FNCT="1"; string _AWON="0"; string _PIRN="00"; void _JPDY(string _JLIB="") { int _NPDQ=0; int _ERDF=0; int _SVMT=0; if(_JLIB=="NatTomahawk") {_NPDQ=60; _ERDF=40;} if(_JLIB=="PetPolarBear") {_NPDQ=140;} if(_JLIB=="Lazerbear") {_NPDQ=90; _SVMT=40;} if(_JLIB=="NativeScout") {_ERDF=90;} if(_JLIB=="Missionary") {_ERDF=100; _SVMT=100;} if(_JLIB=="Priest") {_SVMT=200;} if(_JLIB=="Imam") {_SVMT=200;} if(_JLIB=="NatMedicineMan") {_NPDQ=200;} if(_JLIB=="Surgeon") {_SVMT=300;} if(_JLIB=="Pikeman") {_NPDQ=40; _ERDF=40;} if(_JLIB=="Musketeer") {_NPDQ=75; _SVMT=25;} if(_JLIB=="Rodelero") {_NPDQ=65; _SVMT=35;} if(_JLIB=="Halberdier") {_NPDQ=50; _SVMT=70;} if(_JLIB=="Grenadier") {_NPDQ=120; _SVMT=60;} if(_JLIB=="Janissary") {_NPDQ=100; _SVMT=25;} if(_JLIB=="Dopplesoldner") {_NPDQ=75; _SVMT=125;} if(_JLIB=="MercLandsknecht") {_SVMT=240;} if(_JLIB=="MercSwissPikeman") {_SVMT=160;} if(_JLIB=="MercHighlander") {_SVMT=200;} if(_JLIB=="MercRonin") {_SVMT=400;} if(_JLIB=="MercBarbaryCorsair") {_SVMT=200;} if(_JLIB=="Boneguard") {_NPDQ=75; _SVMT=50;} if(_JLIB=="SPCHoopThrowers") {_NPDQ=100; _SVMT=50;} if(_JLIB=="NatClubmanLoyal") {_NPDQ=200; _ERDF=100;} if(_JLIB=="Crossbowman") {_NPDQ=40; _ERDF=40;} if(_JLIB=="Skirmisher") {_NPDQ=50; _SVMT=65;} if(_JLIB=="Longbowman") {_NPDQ=60; _ERDF=40;} if(_JLIB=="Strelet") {_NPDQ=50; _ERDF=10;} if(_JLIB=="Cacadore") {_NPDQ=80; _SVMT=35;} if(_JLIB=="NatBolasWarrior") {_NPDQ=40; _ERDF=60;} if(_JLIB=="MercJaeger") {_SVMT=180;} if(_JLIB=="AbusGun") {_NPDQ=50; _SVMT=100;} if(_JLIB=="Uhlan") {_NPDQ=50; _SVMT=100;} if(_JLIB=="Hussar") {_NPDQ=120; _SVMT=80;} if(_JLIB=="Cuirassier") {_NPDQ=150; _SVMT=150;} if(_JLIB=="Cossack") {_NPDQ=75; _SVMT=75;} if(_JLIB=="Spahi") {_NPDQ=280;} if(_JLIB=="Oprichnik") {_NPDQ=90; _SVMT=60;} if(_JLIB=="Lancer") {_NPDQ=110; _SVMT=90;} if(_JLIB=="MercMameluke") {_SVMT=400;} if(_JLIB=="MercHackapell") {_SVMT=300;} if(_JLIB=="Learicorn") {_NPDQ=80; _SVMT=40;} if(_JLIB=="GeorgeCrushington") {_NPDQ=7; _ERDF=4; _SVMT=1776;} if(_JLIB=="CavalryArcher") {_NPDQ=100; _SVMT=60;} if(_JLIB=="Dragoon") {_NPDQ=90; _SVMT=90;} if(_JLIB=="Ruyter") {_NPDQ=30; _SVMT=75;} if(_JLIB=="WarWagon") {_NPDQ=150; _SVMT=150;} if(_JLIB=="MercBlackRider") {_SVMT=270;} if(_JLIB=="MercManchu") {_SVMT=220;} if(_JLIB=="Cannon") {_ERDF=200; _SVMT=500;} if(_JLIB=="Culverin") {_ERDF=100; _SVMT=400;} if(_JLIB=="Falconet") {_ERDF=100; _SVMT=400;} if(_JLIB=="Mortar") {_ERDF=100; _SVMT=350;} if(_JLIB=="GreatBombard") {_ERDF=100; _SVMT=600;} if(_JLIB=="OrganGun") {_ERDF=100; _SVMT=300;} if(_JLIB=="Rocket") {_ERDF=100; _SVMT=500;} if(_JLIB=="RussianCannon") {_ERDF=200; _SVMT=1000;} if(_JLIB=="FortFrontier") {_ERDF=600; _SVMT=500;} if(_JLIB=="Outpost") {_ERDF=250;}if(_JLIB=="FieldHospital") {_ERDF=400;} if(_JLIB=="SPCFortTower") {_ERDF=300;} if(_JLIB=="xpArrowKnight") {_NPDQ=50; _SVMT=75;} if(_JLIB=="xpMedicineMan") {_SVMT=200;} if(_JLIB=="xpMedicineManAztec") {_SVMT=200;} if(_JLIB=="xpLightCannon") {_SVMT=300; _ERDF=100;} if(_JLIB=="xpHorseArtillery") {_SVMT=500; _ERDF=100;} if(_JLIB=="xpGatlingGun") {_SVMT=300; _ERDF=100;} if(_JLIB=="xpPetard") {_ERDF=100;_NPDQ=50;} if(_JLIB=="xpPetardNitro") {_ERDF=100;_NPDQ=50;} if(_JLIB=="xpRifleRider") {_SVMT=100;_NPDQ=120;} if(_JLIB=="xpAxeRider") {_SVMT=40;_NPDQ=160;} if(_JLIB=="xpCoupRider") {_SVMT=75;_NPDQ=150;} if(_JLIB=="xpDogSoldier") {_SVMT=300;} if(_JLIB=="xpWarBow") {_NPDQ=65; _ERDF=35;} if(_JLIB=="xpAenna") {_NPDQ=100;} if(_JLIB=="xpMusketWarrior") {_NPDQ=50; _SVMT=65;} if(_JLIB=="xpJaguarKnight") {_NPDQ=120; _SVMT=30;} if(_JLIB=="xpRam") {_NPDQ=80; _ERDF=120;} if(_JLIB=="xpBowRider") {_NPDQ=100; _SVMT=100;} if(_JLIB=="xpMusketRider") {_NPDQ=55; _SVMT=100;} if(_JLIB=="xpHorseman") {_NPDQ=100; _ERDF=75;} if(_JLIB=="xpPumaMan") {_NPDQ=50; _SVMT=50;} if(_JLIB=="MercFusilier") {_SVMT=300;} if(_JLIB=="MercElmeti") {_SVMT=400;} if(_JLIB=="xpSkullKnight") {_SVMT=250;} if(_JLIB=="xpWarClub") {_NPDQ=50; _ERDF=40;} if(_JLIB=="xpEagleKnight") {_NPDQ=75; _SVMT=75;} if(_JLIB=="MercGreatCannon") {_SVMT=1200;} if(_JLIB=="xpColonialMilitia") {_NPDQ=100;} if(_JLIB=="PetGrizzly") {_NPDQ=250;} if(_NPDQ!=0) _SHQL(_JLIB, 17, _NPDQ); if(_ERDF!=0) _SHQL(_JLIB, 16, _ERDF); if(_SVMT!=0) _SHQL(_JLIB, 15, _SVMT); } string _ITLL(string _PLXE=""){ if(_PLXE=="NatTomahawk") {return ("170");} if(_PLXE=="Coureur") {return ("180");} if(_PLXE=="Priest") {return ("360");} if(_PLXE=="NatMedicineMan") {return ("200");} if(_PLXE=="Missionary") {return ("300");} if(_PLXE=="Surgeon") {return ("240");} if(_PLXE=="Imam") {return("360");} if(_PLXE=="OutpostWagon") {return ("250");} if(_PLXE=="Explorer"){return ("400");} if(_PLXE=="Pikeman"){return ("120");} if(_PLXE=="Musketeer"){return ("150");} if(_PLXE=="Rodelero"){return ("135");} if(_PLXE=="Halberdier"){return ("200");} if(_PLXE=="Grenadier"){return ("200");} if(_PLXE=="Janissary"){return ("235");} if(_PLXE=="Dopplesoldner"){return ("200");} if(_PLXE=="NatClubman"){return ("200");} if(_PLXE=="MercLandsknecht"){return ("430");} if(_PLXE=="MercSwissPikeman"){return ("325");} if(_PLXE=="MercHighlander"){return ("400");} if(_PLXE=="MercRonin"){return ("540");} if(_PLXE=="MercBarbaryCorsair"){return ("315");} if(_PLXE=="NatClubmanLoyal"){return ("400");} if(_PLXE=="Crossbowman"){return ("100");} if(_PLXE=="Skirmisher"){return ("120");} if(_PLXE=="Longbowman"){return ("95");} if(_PLXE=="NatSharktoothBowman"){return ("115");} if(_PLXE=="Strelet"){return ("90");} if(_PLXE=="Cacadore"){return ("85");} if(_PLXE=="NatBolasWarrior"){return ("200");} if(_PLXE=="MercJaeger"){return ("250");} if(_PLXE=="AbusGun"){return ("130");} if(_PLXE=="Uhlan"){return ("190");} if(_PLXE=="Hussar"){return ("320");} if(_PLXE=="Cuirassier"){return ("500");} if(_PLXE=="Cossack"){return ("225");} if(_PLXE=="Spahi"){return ("750");} if(_PLXE=="Oprichnik"){return ("250");} if(_PLXE=="Lancer"){return ("350");} if(_PLXE=="MercMameluke"){return ("1450");} if(_PLXE=="MercHackapell"){return ("295");} if(_PLXE=="NatAxeRiderDogSoldier"){return ("730");} if(_PLXE=="CavalryArcher"){return ("265");} if(_PLXE=="Dragoon"){return ("200");} if(_PLXE=="Ruyter"){return ("140");} if(_PLXE=="WarWagon"){return ("500");} if(_PLXE=="MercBlackRider"){return ("520");} if(_PLXE=="MercManchu"){return ("400");} if(_PLXE=="Cannon"){return ("475");} if(_PLXE=="Culverin"){return ("280");} if(_PLXE=="Falconet"){return ("200");} if(_PLXE=="Mortar"){return ("300");} if(_PLXE=="GreatBombard"){return ("475");} if(_PLXE=="OrganGun"){return ("150");} if(_PLXE=="Rocket"){return ("350");} if(_PLXE=="RussianCannon"){return ("800");} if(_PLXE=="SPCRailroadWorker") {return("270");} if(_PLXE=="xpArrowKnight") {return ("150");} if(_PLXE=="xpMedicineMan") {return ("360");} if(_PLXE=="xpMedicineManAztec") {return ("360");} if(_PLXE=="xpHorseArtillery") {return ("200");} if(_PLXE=="xpLightCannon") {return ("150");} if(_PLXE=="xpGatlingGun") {return ("150");} if(_PLXE=="xpPetard") {return ("225");} if(_PLXE=="xpPetard") {return ("750");} if(_PLXE=="xpAxeRider") {return ("250");} if(_PLXE=="xpRifleRider") {return ("205");} if(_PLXE=="xpCoupRider") {return ("170");} if(_PLXE=="xpDogSoldier") {return ("550");} if(_PLXE=="xpWarBow") {return ("90");} if(_PLXE=="xpAenna") {return ("110");} if(_PLXE=="xpMusketWarrior") {return ("110");} if(_PLXE=="xpJaguarKnight") {return ("230");} if(_PLXE=="xpRam") {return ("200");} if(_PLXE=="xpLakotaWarchief"||_PLXE=="xpAztecWarchief"||_PLXE=="xpIroquoisWarchief") {return ("500");} if(_PLXE=="xpBowRider") {return ("250");} if(_PLXE=="xpMusketRider") {return ("205");} if(_PLXE=="xpHorseman") {return ("270");} if(_PLXE=="xpPumaMan") {return ("135");} if(_PLXE=="MercFusilier") {return ("300");} if(_PLXE=="MercElmeti") {return ("1000");} if(_PLXE=="xpSkullKnight") {return ("300");} if(_PLXE=="xpWarClub") {return ("120");} if(_PLXE=="xpEagleKnight") {return ("180");} if(_PLXE=="MercGreatCannon") {return ("600");} if(_PLXE=="xpColonialMilitia") {return ("200");} if(_PLXE=="PetGrizzly") {return ("300");} if(_PLXE=="GeorgeCrushington") {return("999999");} if(_PLXE=="OutlawMusketeer") {return("450");} if(_PLXE=="SPCWhiteBuffalo") {return("480");} return ("0"); } int _EXDT(string _LRDK = "") { if(_LRDK=="MercRonin") return(2500-540); if(_LRDK=="Explorer") return(12); if(_LRDK=="Oprichnik") return(2); if(_LRDK=="NatBolasWarrior") return(15); if(_LRDK=="Crossbowman") return(12); if(_LRDK=="GeorgeCrushington") return(10000); return(0); } void _QUVP(int i=0, string _YHEP="", string _DUUV="1.0", string _MHEC="") { float upgmult = 1.0; _QDXG("upgrade"+_YHEP+"("+i+", ("+upgmult+")*("+_DUUV+"));"); if(_MHEC=="") { if(rmGetPlayerCiv(i)==_LFDX) _CMOF("_CGGU"+i, "+", "("+upgmult+")*("+_DUUV+")"); if(rmGetPlayerCiv(i)==_AYLN) _CMOF("_QUSK"+i, "+", "("+upgmult+")*("+_DUUV+")"); _PNVG(i, _YHEP, _DUUV); } } void _TTEY(string _YHEP="") { _FQCK("void upgrade"+_YHEP+"(int p=0, float _DUUV=1.0) {"); string _HTLQ="_DUUV*"; if((_YHEP=="Attack")||(_YHEP=="Multipliers")) { _FQCK("for(var1=1;<=_DUUV) {"); _MXJD( _THLE, _THLE, _PYNZ, _FROT, _PYNZ, _FROT); _ANNA( _TCJT, "3"); _ANNA(_OXYT, ""+(_EXDT("Oprichnik")-1)); _JAVW("Oprichnik", 0, "-0.3*"+(_EXDT("Oprichnik")-1)+"*"+_ITLL("Oprichnik")); _ANNA(_RXBG, ""+_EXDT("NatBolasWarrior")); _JAVW("NatBolasWarrior", 0, "-1.0*"+_EXDT("NatBolasWarrior")+"*0.25*"+_ITLL("NatBolasWarrior")); _ANNA(_HGXP, ""+_EXDT("Crossbowman")); _JAVW("Crossbowman", 0, "-1.0*"+_EXDT("Crossbowman")+"*0.2*"+_ITLL("Crossbowman")); _FQCK("}"); for(var1=1;<=_PPPS) { if(_UACB(var1, "Artillery")!=""&&_UACB(var1, "Cannons")!="") { _JAVW(_UACB(var1), 0, _MMTA+_HTLQ+_ITLL(_UACB(var1))); } if(_UACB(var1, "Native")!="") { _JAVW(_UACB(var1), 0, "-3.0*0.25*"+_HTLQ+_ITLL(_UACB(var1))); } } } if((_YHEP=="HP")||(_YHEP=="Multipliers")) { _FQCK("if(_DUUV>=1) {"); _FQCK("for(var1=1;<=_DUUV) {"); _MXJD(_MIGO, _UJZU, _MIGO, _UJZU); _FQCK("}"); _FQCK("}"); for(var1=1;<=_PPPS) { if(_UACB(var1, "HInf")!="") { _FQCK("if(_RNLD(p)=="+_MWHH+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+aztechp+"*"+_ITLL(_UACB(var1))); if(_UACB(var1)=="xpSkullKnight") { _JAVW(_UACB(var1), 0, _MMTA+_HTLQ+aztechp+"*100"); } _FQCK("}"); } if(_UACB(var1, "Spawn")!=""&&_UACB(var1, "Artillery")=="") { _FQCK("if(_RNLD(p)=="+_VSCX+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"(0.0-"+_NCBX+")*"+_ITLL(_UACB(var1))); if(_UACB(var1)=="xpSkullKnight") { _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"(0.0+"+_NCBX+")*100"); } _FQCK("}"); } if(_UACB(var1, "Artillery")!=""&&_UACB(var1, "HeavyArt")==""&&_UACB(var1, "Cannons")!="") { _FQCK("if(_RNLD(p)!="+_VSCX+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+_ITLL(_UACB(var1))); _FQCK("}"); _FQCK("if(_RNLD(p)=="+_VSCX+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"(1.0-"+_NCBX+")*"+_ITLL(_UACB(var1))); _FQCK("}"); } if(_UACB(var1, "Spawn")!=""&&_UACB(var1, "HeavyArt")!="") { _FQCK("if(_RNLD(p)!="+_VSCX+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"("+_ITLL(_UACB(var1))+"-200)"); _FQCK("}"); _FQCK("if(_RNLD(p)=="+_VSCX+") {"); _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"((1.0-"+_NCBX+")*("+_ITLL(_UACB(var1))+"-200))"); _FQCK("}"); } if(_UACB(var1, "Native")!="") { _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+"("+_FSKS+"*(0.25*"+_ITLL(_UACB(var1))+"))"); } if(_UACB(var1, "Other")!="") { _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+_ITLL(_UACB(var1))); } if(_UACB(var1, "Explorer")!="") { _JAVW(_UACB(var1), 0, _TBDZ+_HTLQ+_EBEO+"*"+_ITLL(_UACB(var1))); } } _JAVW("OutpostWagon", 0, _TBDZ+_HTLQ+"550"); _JAVW("Crossbowman", 0, _TBDZ+_HTLQ+"500"); _JAVW("xpSkullKnight", 0, _MMTA+_HTLQ+"100"); _JAVW("NatBolasWarrior", 0, _TBDZ+_HTLQ+"2050"); _JAVW("MercRonin", 0, _TBDZ+_HTLQ+_EXDT("MercRonin")); _JAVW("RussianCannon", 0, _TBDZ+_HTLQ+"400"); _JAVW("MercGreatCannon", 0, _TBDZ+_HTLQ+"300"); _JAVW("Oprichnik", 0, _TBDZ+_HTLQ+"(2.0*"+_ITLL("Oprichnik")+")"); _JAVW("xpPetard", 0, _TBDZ+_HTLQ+"(-75)"); _JAVW("PetGrizzly", 0, _TBDZ+_HTLQ+_ITLL("PetGrizzly")); _JAVW("SPCWhiteBuffalo", 0, _TBDZ+_HTLQ+_ITLL("SPCWhiteBuffalo")); _JAVW("GeorgeCrushington", 0, _MMTA+_HTLQ+"("+_ITLL("GeorgeCrushington")+"-"+_EXDT("GeorgeCrushington")+")"); _JAVW("xpRam", 0, _TBDZ+_HTLQ+"0.5*"+_ITLL("xpRam")); } if(_YHEP=="Speed") { for(var1=1;<=_PPPS) { if(_UACB(var1)!="") { _JAVW(_UACB(var1), 1, _HTLQ+_QSOE); } } } if(_YHEP=="LOS") { for(var1=1;<=_PPPS) { if(_UACB(var1)!=""&&_UACB(var1)!="Llama") { _JAVW(_UACB(var1), 2, _HTLQ+"4"); } } _ANNA(_HZRI, "_DUUV"); } if(_YHEP=="BuildingHP") { _XWJS("FortHP\"+p+\"", "+", _HTLQ+"0.3*"+_HMSR); _JAVW("FortFrontier", 0, _HTLQ+"0.3*"+_HMSR); _JAVW("Outpost", 0, _HTLQ+"0.3*"+_JEEU); } if(_YHEP=="BuildingAttack") { _JAVW("FortFrontier", 2, "-2*(_DUUV*6)*"+fortatk); _JAVW("FortFrontier", 14, "-2*(_DUUV*6)*"+fortatk); _ANNA( _OTHO, "_DUUV*6"); _ANNA( _NOCK, "_DUUV*2*"+fortatk); } _FQCK("}"); } void _LBBB(string _VOQO="", string _ZKYN="", string _AYYR="", string _BAQM="", int _YJHZ=0, float _XNDS=0, float _IYFS=0, float _EXWB=0, string _IOEW="", int _TCDL=1, string _QVQR="", int _CILI=0) { string _PQMV = ""; string _JIFV=_VOQO; string _GYMK=_IOEW; string _MHEC=_ZKYN; string _GOTZ = ""; string _JMNZ=""; string _QTMR=""; if(_VOQO=="xBuy"||_VOQO=="xUpg"||_VOQO=="xSpc"||_VOQO=="xGP") _QTMR="x"; if(_AYYR!="") _MHEC=_AYYR; string _PNDE=_MHEC; if(_QTMR=="x") _PNDE="x"+_MHEC; int _VNMT = cNumberNonGaiaPlayers; int _HJIT = 1; if(_CILI!=0) { _VNMT = _CILI; _HJIT = _CILI; } if(_IOEW=="") _GYMK=_BAQM; if(_VOQO=="xBuy") _JIFV="Buy"; if(_VOQO=="xUpg") _JIFV="Upg"; if(_VOQO=="xGP") _JIFV="GP"; if(_VOQO=="Spc"||_VOQO=="xSpc") { _JIFV="Buy"; _GOTZ = "Spc"; _JMNZ="Spc"; } for(i=_HJIT;<=_VNMT) { rmCreateTrigger(_VOQO+"_"+_PNDE+i+"_1"); if(_JIFV=="GP") rmCreateTrigger(_VOQO+"_"+_PNDE+i+"_2"); } if(_QTMR!="x") { for(i=_HJIT;<=_VNMT) { var5 = rmCreateObjectDef(_PNDE+i); rmAddObjectDefItem(var5,_BAQM,1,0.0); rmSetIgnoreForceToGaia(true); rmPlaceObjectDefAtLoc(var5, i, _TREH(_OQKH(_KVAK, i), _IYFS), _XIFB(_OQKH(_VLAV, i), _EXWB)); int _QNJR=rmGetUnitPlaced(var5, 0); _HCUY("_SRWM"); _FCIE("Convert"); _XPHB("SrcObject", _QNJR); _XPHB("PlayerID", i); } } _HCUY("_GSDD"); if(_QVQR!="addcost") _JPDY(_BAQM); if(_BAQM!=_GYMK&&_QVQR!="addcost") _JPDY(_GYMK); _HCUY("_KOIA"); _JAVW(_BAQM, 15, "xchange*"+_YJHZ); if(_BAQM!=_GYMK) _JAVW(_GYMK, 15, "xchange*"+_YJHZ); _FNHY(_PNDE+"Cost\"+p+\"", "xchange*"+_YJHZ); _FNHY(_PNDE+"_XNDS\"+p+\"", ""+_XNDS); if(_WWQQ==0) _FNHY(_PNDE+"_XNDS\"+p+\"", "0"); if(_JIFV=="GP") _FNHY("gpdur"+_MHEC+"\"+p+\"", ""+_TCDL); for(i=_HJIT;<=_VNMT) { if(_QTMR!="x") _HCUY("_SRWM"); if(_QTMR=="x") _HCUY(_WQNK+i); _MPJJ(_VOQO+"_"+_PNDE+i+"_1"); } for(i=_HJIT;<=_VNMT) { if(_JIFV!="GP") _HCUY(_VOQO+"_"+_PNDE+i+"_1", 4, "Loop", "Run"); if(_JIFV=="GP") _HCUY(_VOQO+"_"+_PNDE+i+"_1", 4, "Run"); _SDNV("_HLSY"+i, "==", ""+1); _XEUM(_GWHR(_MPPH, i), i, _BAQM, ""+6, "==", ""+1); _FKCY(i, "Gold", ">=", "_SDNV(\""+_PNDE+"Cost"+i+"\")"); if(_JMNZ=="Spc"||_JIFV=="GP") { _FCIE("Move From Area"); _XPHB("RefObject", _GWHR(_MPPH, i)); _FHDA("UnitType", _BAQM); _FHDA("PlayerID", ""+i); _XPHB("Radius", 6); _FHDA("AttackMove", "false"); _FHDA("DstPoint", rmXFractionToMeters(_TREH(_OQKH(_KVAK, i), _IYFS))+",1,"+rmZFractionToMeters(_XIFB(_OQKH(_VLAV, i), _EXWB))); } if(_JIFV=="Upg") { _HTUO(_EEDD); _QUVP(i, _MHEC, ""+_TCDL); } if(_JIFV=="Buy") { if(_BAQM!="OutpostWagon"&&_GOTZ!="Spc") { _OEUN("Player Population"); _TPWJ("PlayerID", ""+i); _TPWJ("Op", "<="); _TPWJ("Count", "_SDNV(\"_LCHH"+i+"\")"); } _HTUO(_PSZR); _ABJR(i, "Special"); if(_JMNZ!="Spc"&&_JMNZ!="Army") _ZMII(i, spawn, _GYMK, _TCDL); } if(_JIFV=="GP") { if(_MHEC=="SuperSpeed") { _CWGX("LazerBearShoot.wav"); _QUVP(i, "Speed", ""+_YCXF/0.25, "GP"); } if(_MHEC=="Revolt") { _CWGX("BattlecryMedium.wav"); _QDXG("_CKJQ("+i+", \"OutlawMusketeer\");"); _PQMV= "Spawned Units Transformed to Outlaw Musketeers"; } if(_MHEC=="ScatterBear") { _ABJR(i, "Special"); _ZMII(i, spawn, _GYMK, 1); _PQMV= "Bear Scatters Enemy Units Where Dead"; } if(_MHEC=="RRWorker") { _ABJR(i, "Special"); _ZMII(i, spawn, _GYMK, 1); _PQMV= "Buffalo; Spawn to RR Workers Where Dead"; } _MPJJ(_VOQO+"_"+_PNDE+i+"_2"); } _YKXJ(i, "Gold", "-1*_SDNV(\""+_PNDE+"Cost"+i+"\")"); if(_XNDS!=0) { if(_BAQM!=_GYMK) _NTAT(_GYMK, i, 15, "-1*_SDNV(\""+_PNDE+"Cost"+i+"\")"); if(_PNDE=="Attack"||_PNDE=="HP"||_PNDE=="Speed") { _NTAT(_AOVL, i, 15, "-1*_SDNV(\"AttackCost"+i+"\")"); _NTAT(_ZYLN, i, 15, "-1*_SDNV(\"HPCost"+i+"\")"); _NTAT(_UBFA, i, 15, "-1*_SDNV(\"SpeedCost"+i+"\")"); } if(_PNDE!="Attack"&&_PNDE!="HP"&&_PNDE!="Speed") { _NTAT(_BAQM, i, 15, "-1*_SDNV(\""+_PNDE+"Cost"+i+"\")"); } _QDXG("int xcc=_SDNV(\""+_PNDE+"_XNDS"+i+"\");"); if(_PNDE=="Attack"||_PNDE=="HP"||_PNDE=="Speed") { _CMOF("AttackCost"+i, "+", "xcc"); _CMOF("HPCost"+i, "+", "xcc"); _CMOF("SpeedCost"+i, "+", "xcc"); _NTAT(_AOVL, i, 15, "_SDNV(\"AttackCost"+i+"\")"); _NTAT(_ZYLN, i, 15, "_SDNV(\"HPCost"+i+"\")"); _NTAT(_UBFA, i, 15, "_SDNV(\"SpeedCost"+i+"\")"); } if(_PNDE!="Attack"&&_PNDE!="HP"&&_PNDE!="Speed") { _CMOF(_PNDE+"Cost"+i, "+", "xcc"); _NTAT(_BAQM, i, 15, "_SDNV(\""+_PNDE+"Cost"+i+"\")"); } if(_BAQM!=_GYMK) _NTAT(_GYMK, i, 15, "_SDNV(\""+_PNDE+"Cost"+i+"\")"); } _QDXG("int nc = _SDNV(\""+_PNDE+"Cost"+i+"\");"); if(_JIFV=="Upg") { _QDXG("int upc = _SDNV(\""+_MHEC+"Upg"+i+"\");"); if(_PNDE=="Attack"||_PNDE=="HP"||_PNDE=="Speed") { _QDXG("string nam = \"<color=1,0,0>"+_ZKYN+" Upgrade\";"); _QDXG("string uupg = \"All Unit Upgs\";"); _ZSLZ(i, _DYGT+"\"+nam+\" \"+upc+\":</color> Next costs \"+nc+\" (\"+uupg+\" +\"+xcc+\") Coin!"); } if(_PNDE!="Attack"&&_PNDE!="HP"&&_PNDE!="Speed") { _ZSLZ(i, _DYGT+"<color=1,0,0>"+_ZKYN+" Upgrade \"+upc+\":</color> Next costs \"+nc+\" (+\"+xcc+\") Coin!"); } } if(_JIFV=="Buy") { if(_XNDS!=0) _ZSLZ(i, _DYGT+"Next "+_ZKYN+" purchase costs \"+nc+\" (+\"+xcc+\") Coin!"); if(_XNDS==0) _ZSLZ(i, _DYGT+_ZKYN+" purchased for \"+nc+\" Coin!"); } if(_JIFV=="GP") { _QDXG("int gpdur = _SDNV(\"gpdur"+_MHEC+i+"\"); string _ETLG=\"\";"); if(_TCDL!=0) _QDXG("_ETLG=\" for \"+gpdur+\" sec\";"); if(_MHEC!="ScatterBear"&&_MHEC!="RRWorker") _FQGV(i, _CBBC+"has purchased "+_ZKYN+"! ("+_PQMV+"\"+_ETLG+\")</color>" ); if(_MHEC=="ScatterBear"||_MHEC=="RRWorker") _ZSLZ(i, _DYGT+_ZKYN+" purchased for \"+nc+\" Coin ("+_PQMV+")!"); var1=1; if(_MHEC=="ScatterBear"||_MHEC=="RRWorker") var1=3; _HCUY(_VOQO+"_"+_PNDE+i+"_2", var1*_RTWQ); if(_TCDL!=0) { _VPRE("_SDNV(\"gpdur"+_MHEC+i+"\")"); _ZSLZ(i, _RXIB+_ZKYN+" has ended."); } if(_TCDL==0) { _HTUO(2); } if(_MHEC=="ScatterBear") { _NNBE(i, "PetGrizzly", "==", "1"); _QDXG("_QJZD("+i+");"); _CWGX("BearGrunt3.wav"); _FQGV(i, _CBBC+"has scattered (and unstealthed) enemy units with "+_ZKYN+"!"); } if(_MHEC=="RRWorker") { _NNBE(i, _HRCB, "==", "1"); _QDXG("_DJZZ("+i+");"); _CWGX("grenade3.wav"); _FQGV(i, _CBBC+"has cast "+_ZKYN+" (Spawn near buffalo, including enemy, to RR Workers)!"); } _MPJJ(_VOQO+"_"+_PNDE+i+"_1"); if(_MHEC=="SuperSpeed") _QUVP(i, "Speed", "-"+(_YCXF/0.25), "GP"); } } } void spawner() { for(i=1;<cNumberPlayers) { _ABJR(i, "Reg"); rmCreateTrigger("_KQCE"+i); _HCUY("_KQCE"+i, 1, "Active", "Loop"); float _VXRL=1.0; if(rmGetPlayerCiv(i)==_VSCX) _VXRL=1.0*_VXRL*(1.0-_WHMS); _VXRL=1.0*_VXRL*_OWKV; _QDXG("_LSGW("+i+", "+spawn+", "+_GWHR(_HTBC, i)+", "+rmXFractionToMeters(_GGGE)+", "+rmZFractionToMeters(_KJDQ)+", "+rmXFractionToMeters(_ZJEN)+", "+rmZFractionToMeters(_PEVQ)+", "+_VXRL+");"); } } string _LIVF(string _PLXE=""){ if(_PLXE=="NatTomahawk") {return ("Tomahawk");} if(_PLXE=="SPCLizzie") {return ("Lizzie");} if(_PLXE=="SPCDelgado") {return ("Delgado");} if(_PLXE=="SPCBeaumont") {return ("Beaumont");} if(_PLXE=="SPCJohn") {return ("John Black");} if(_PLXE=="FlagBearerDefault") {return ("Flag Bearer");} if(_PLXE=="SPCBolivar") {return ("Bolivar");} if(_PLXE=="IGCKanyenkeHack") {return ("Kanyenke");} if(_PLXE=="PropGrassFire") {return ("Grass Fire");} if(_PLXE=="EaglesNest") {return ("Tree");}if(_PLXE=="SPCWagonAll") {return ("Supply Wagon");} if(_PLXE=="NatMedicineMan") {return ("Medicine Man");} if(_PLXE=="Halberdier"){return ("Veteran Halberdier");} if(_PLXE=="NatJaguarWarrior"){return ("Aztec Jaguar Warrior");} if(_PLXE=="Dopplesoldner"){return ("Doppelsoldner");} if(_PLXE=="MercLandsknecht"){return ("Landsknecht");} if(_PLXE=="MercSwissPikeman"){return ("Swiss Pikeman");} if(_PLXE=="MercHighlander"){return ("Highlander");} if(_PLXE=="MercRonin"){return ("Ronin");} if(_PLXE=="IGCMorgan"){return ("Morgan Black");} if(_PLXE=="IGCJohn"){return ("John Black");} if(_PLXE=="IGCAmelia"){return ("Amelia Black");} if(_PLXE=="IGCKanyenke"){return ("Kanyenke");} if(_PLXE=="IGCNonahkee"){return ("Nonahkee");} if(_PLXE=="IGCAlain"){return ("Alain Magnan");} if(_PLXE=="IGCWarwick"){return ("General Warwick");} if(_PLXE=="IGCBeaumont"){return ("Beaumont");} if(_PLXE=="IGCLizzie"){return ("Elisabet Ramsey");} if(_PLXE=="IGCSahin"){return ("Sahin");} if(_PLXE=="IGCCooper"){return ("Cooper");} if(_PLXE=="IGCDelgado"){return ("Delgado");} if(_PLXE=="MercBarbaryCorsair"){return ("Barbary Corsair");} if(_PLXE=="IGCWashington"){return ("Colonel Washington");} if(_PLXE=="IGCStuart"){return ("Stuart Black");} if(_PLXE=="FlagBearerDefault"){return ("Flag Bearer");} if(_PLXE=="SPCSahin"){return ("Sahin");} if(_PLXE=="SPCWarwick"){return ("General Warwick");} if(_PLXE=="SPCWashington"){return ("Colonel Washington");} if(_PLXE=="IGCGreatPlainsChief"){return ("Great Plains Chief");} if(_PLXE=="SPCHoopThrowers"){return ("Hoop Thrower");} if(_PLXE=="BoneguardAge2"){return ("Boneguard");} if(_PLXE=="IGCJohnHack"){return ("John Black");} if(_PLXE=="IGCKanyenkeHack"){return ("Kanyenke");} if(_PLXE=="NatClubmanLoyal"){return ("Nootka Warchief");} if(_PLXE=="IGCBolivar"){return ("Bolivar");} if(_PLXE=="SPCAztecChief"){return ("Aztec Chief");} if(_PLXE=="SPCOldKanyenke"){return ("Kanyenke");} if(_PLXE=="IGCOldCoot"){return ("Old Coot");} if(_PLXE=="IGCAlainHorse"){return ("Alain Magnan");} if(_PLXE=="IGCOldKanyenke"){return ("Kanyenke");} if(_PLXE=="SPCBuccaneer"){return ("Buccaneer");} if(_PLXE=="SPCRailroadWorker"){return ("Railroad Worker");} if(_PLXE=="IGCOldChilche"){return ("Chilche");} if(_PLXE=="IGCBoneguard"){return ("Boneguard");} if(_PLXE=="IGCMusketeer"){return ("Musketeer");} if(_PLXE=="IGCHarbormaster"){return ("Harbormaster");} if(_PLXE=="Cacadore"){return ("Cassador");} if(_PLXE=="NatBolasWarrior"){return ("Incan Bolas Warrior");} if(_PLXE=="MercJaeger"){return ("Jaeger");} if(_PLXE=="AbusGun") {return ("Abus Gun");} if(_PLXE=="IGCJaeger"){return ("Jaeger");} if(_PLXE=="IGCCrossbowman"){return ("Crossbowman");} if(_PLXE=="MercMameluke"){return ("Mameluke");} if(_PLXE=="MercHackapell"){return ("Hackapell");} if(_PLXE=="NatAxeRiderDogSoldier"){return ("Lakota Dog Soldier");} if(_PLXE=="SPCAlain"){return ("Alain Magnan");} if(_PLXE=="SPCAlain2"){return ("Alain Magnan");} if(_PLXE=="GeorgeCrushington"){return ("George Crushington");} if(_PLXE=="CavalryArcher"){return ("Cavalry Archer");} if(_PLXE=="WarWagon"){return ("Veteran War Wagon");} if(_PLXE=="MercBlackRider"){return ("Black Rider");} if(_PLXE=="MercManchu"){return ("Manchu");} if(_PLXE=="Cannon"){return ("Heavy Cannon");} if(_PLXE=="GreatBombard"){return ("Great Bombard");} if(_PLXE=="OrganGun"){return ("Organ Gun");} if(_PLXE=="RussianCannon"){return ("Great Cannon");} if(_PLXE=="MediocreBombard"){return ("Mediocre Bombard");} if(_PLXE=="FortFrontier"){return ("Fort");} if(_PLXE=="SPCFixedGun"){return ("Fixed Gun");} if(_PLXE=="TreeChristmas"){return ("Christmas Tree");} if(_PLXE=="IGCFlagBearer") {return ("Flag Bearer");} if(_PLXE=="FortWagon") {return ("Fort Wagon");} if(_PLXE=="SPCWhiteBuffalo") {return("White Buffalo");} if(_PLXE=="PetPolarBear") {return("Polar Bear");} if(_PLXE=="SPCFortTower"){return ("Fort Tower");} if(_PLXE=="NativeHouseCree") {return ("Native Hut");} if(_PLXE=="SPCFixedGun") {return ("Fixed Gun");} if(_PLXE=="xpArrowKnight") {return ("Arrow Knight");} if(_PLXE=="xpMedicineMan") {return ("Priest");} if(_PLXE=="xpMedicineManAztec") {return ("Warrior Priest");} if(_PLXE=="xpLightCannon") {return ("Light Cannon");} if(_PLXE=="xpGatlingGun") {return ("Gatling Gun");} if(_PLXE=="xpHorseArtillery") {return ("Horse Artillery");} if(_PLXE=="xpPetard") {return ("Petard");} if(_PLXE=="xpPetardNitro") {return ("Nitro Petard");} if(_PLXE=="xpRifleRider") {return ("Rifle Rider");} if(_PLXE=="xpAxeRider") {return ("Axe Rider");} if(_PLXE=="xpCoupRider") {return("Tashunke Prowler");} if(_PLXE=="xpDogSoldier") {return("Sioux Dog Soldier");} if(_PLXE=="xpWarBow") {return ("Cetan Bow");} if(_PLXE=="xpAenna") {return ("Aenna");} if(_PLXE=="xpMusketWarrior") {return ("Forest Prowler");} if(_PLXE=="xpJaguarKnight") {return ("Jaguar Prowler Knight");} if(_PLXE=="TurkeyScout") {return ("Turkey");} if(_PLXE=="xpRam") {return ("Elite Ram");} if(_PLXE=="xpAztecWarchief") {return ("Aztec Warchief");} if(_PLXE=="xpIroquoisWarchief") {return ("Iroquois Warchief");} if(_PLXE=="xpLakotaWarchief") {return ("Sioux Warchief");} if(_PLXE=="xpBowRider") {return ("Bow Rider");} if(_PLXE=="xpMusketRider") {return ("Musket Rider");} if(_PLXE=="xpHorseman") {return ("Kanya Horseman");} if(_PLXE=="xpPumaMan") {return ("Puma Spearman");} if(_PLXE=="MercFusilier") {return ("Fusilier");} if(_PLXE=="MercElmeti") {return ("Elmeti");} if(_PLXE=="xpSkullKnight") {return ("Skull Knight");} if(_PLXE=="xpWarClub") {return ("War Club");} if(_PLXE=="xpEagleKnight") {return ("Eagle Knight");} if(_PLXE=="MercGreatCannon") {return ("Lil Bombard");} if(_PLXE=="xpColonialMilitia") {return ("Colonial Militia");} if(_PLXE=="PetGrizzly") {return ("Grizzly Bear");} if(_PLXE=="OutlawMusketeer") {return ("Outlaw Musketeer");} return (_PLXE); } float _EDKJ = 1; float _IGAV = -4.5; int _YXJV(string _EQVR="") { if(_EQVR=="MercBlackRider") return (5); if(_EQVR=="MercHighlander") return (9); if(_EQVR=="MercMameluke") return (6); if(_EQVR=="MercLandsknecht") return (7); if(_EQVR=="MercJaeger") return (6); if(_EQVR=="MercHackapell") return (6); if(_EQVR=="MercSwissPikeman") return (6); if(_EQVR=="Spahi") return (7); if(_EQVR=="MercManchu") return (7); if(_EQVR=="xpDogSoldier") return (6); if(_EQVR=="xpRam") return (12); if(_EQVR=="xpArrowKnight") return(5); return (0); } int _BACU(string _EQVR="") { if(_EQVR=="MercBlackRider") return (2); if(_EQVR=="MercHighlander") return (3); if(_EQVR=="MercMameluke") return (2); if(_EQVR=="MercLandsknecht") return (3); if(_EQVR=="MercJaeger") return (3); if(_EQVR=="MercHackapell") return (2); if(_EQVR=="MercSwissPikeman") return (3); if(_EQVR=="Spahi") return (2); if(_EQVR=="MercManchu") return (3); if(_EQVR=="xpDogSoldier") return (2); if(_EQVR=="NatTomahawk") return (6); if(_EQVR=="xpRam") return (3); if(_EQVR=="xpArrowKnight") return (5); return (0); } int _IGAI(string _PYHB="") { int _BXIP = _BACU(_PYHB); return (_BXIP); return(0); } int _DILS(string _PYHB="") { if(_PYHB=="OrganGun") return(2); if(_PYHB=="xpLightCannon") return(3); if(_PYHB=="xpSkullKnight") return(5); return(1); } void _BZNC(int _CILI = 0, string _EQVR ="", int _YJHZ=0, int xnum=0) { int xxcost = _YXJV(_EQVR); int xxnum = _BACU(_EQVR); if(_YJHZ!=0) {xxcost=_YJHZ;} if(xnum!=0) {xxnum=xnum;} _LBBB("Buy", xxnum+" "+_LIVF(_EQVR), _EQVR, _EQVR, xxcost, 0, _EDKJ, _IGAV, "", xxnum, "addcost", _CILI); _ZXUG(_VYBJ, _CILI, _EQVR); } void _WHRB(int _CILI=0) { int _LIRI = rmGetPlayerCiv(_CILI); if (_LIRI == _PHQG) { _HCUY("_OUOY"); _CMOF("_RFFV"+_CILI, "-", ""+_UJJL); _BZNC(_CILI, _LDVG); int spancheap = 100-(100*_QPMX); _ZXUG(_XTYV, _CILI, "As Spanish, everything can be bought "+spancheap+" percent cheaper, but you have a "+_UJJL+" less coin cap!"); _ZXUG(_OXHF, _CILI, _LDVG); _ZXUG(_KXOP, _CILI, _EUFD); } if (_LIRI == _HUME) { _HCUY("_OUOY"); _QUVP(_CILI, "Attack", ""+_IFIF); _QUVP(_CILI, "HP", ""+_IFIF); _QUVP(_CILI, "Speed", ""+_IFIF); _QUVP(_CILI, "LOS", ""+_IFIF); _QUVP(_CILI, "BuildingHP", ""+_IFIF); _QUVP(_CILI, "BuildingAttack", ""+_IFIF); _BZNC(_CILI, _YLWG); _ZXUG(_XTYV, _CILI, "As British, you start with "+_IFIF+" of each upgrade and 2 extra towers!"); _ZXUG(_OXHF, _CILI, _YLWG); _ZXUG(_KXOP, _CILI, _XOTO); } if (_LIRI == _AYLN) { rmCreateTrigger("_QITX"+_CILI); _HCUY("_QITX"+_CILI, 1, "Loop"); _SDNV("_QUSK"+_CILI, ">=", ""+_GIIG); _CMOF("_QUSK"+_CILI, "-", ""+_GIIG); _HLUI(_CILI, _UJZU); _NTAT("NatAxeRiderDogSoldier", _CILI, 0, "0.5*"+_TBDZ+"("+_FSKS+"*(0.25*"+_ITLL("NatAxeRiderDogSoldier")+"))"); _NTAT("xpLakotaWarchief", _CILI, 0, "0.5*"+_TBDZ+_EBEO+"*"+_ITLL("xpLakotaWarchief")); _NTAT("Oprichnik", _CILI, 0, "0.5*"+_TBDZ+"(1.0*"+_EXDT("Oprichnik")+"*"+_ITLL("Oprichnik")+")"); _HCUY("_OUOY"); _QUVP(_CILI, "BuildingHP", "-"+_WAUR, "CivBonus"); _HPKX("_QUSK"+_CILI, "0"); _MPJJ("_QITX"+_CILI); _BZNC(_CILI, _BUSB); _ZXUG(_XTYV, _CILI, "As French, cavalry get 1/2 HP upgrade every "+_GIIG+" upgrades but buildings have "+_QNQR+" percent less HP!"); _ZXUG(_OXHF, _CILI, _BUSB); _ZXUG(_KXOP, _CILI, _GBGX); } if (_LIRI == _LFDX) { rmCreateTrigger("_FMEI"+_CILI); _HCUY("_FMEI"+_CILI, 1, "Loop"); _SDNV("_CGGU"+_CILI, ">=", ""+_KNLY); _CMOF("_CGGU"+_CILI, "-", ""+_KNLY); _QECI(_CILI, NatLacrosse, 2); _QECI(_CILI, _RXBG, 2*(_EXDT("NatBolasWarrior")+3)/3); _QECI(_CILI, _HGXP, 2*_EXDT("Crossbowman")/3); _NTAT("NatBolasWarrior", _CILI, 0, "-1.0*(2*("+_EXDT("NatBolasWarrior")+"+3)/3)*0.25*"+_ITLL("NatBolasWarrior")); _NTAT("Crossbowman", _CILI, 0, "-1.0*(2*"+_EXDT("Crossbowman")+"/3)*0.2*"+_ITLL("Crossbowman")); _HCUY("_OUOY"); _QUVP(_CILI, "Speed", "-1.0*(("+_JYHF+")/"+_QSOE+")", "PortsDef"); _MPJJ("_FMEI"+_CILI); _BZNC(_CILI, _MBOR); _ZXUG(_XTYV, _CILI, "As Portuguese, ranged infantry get 2/3 attack upgrade every "+_KNLY+" upgrades; unit speed is "+_JYHF+" less!"); _ZXUG(_OXHF, _CILI, _MBOR); _ZXUG(_KXOP, _CILI, _PEYA); } if (_LIRI == _FIRC) { _HCUY("_OUOY"); _NTAT("Settler", _CILI, 15, "-100"); _CMOF("_LCHH"+_CILI, "+", "-1*"+_FZKV); _CMOF("_RFFV"+_CILI, "+", ""+_ATXD); _NTAT("FortFrontier", _CILI, 7, "-1*"+_FZKV); int dutchcoin=100-(100*_COKS); _BZNC(_CILI, _XTLH); _ZXUG(_XTYV, _CILI, "As Dutch, you have a max coin of "+(100+_ATXD)+" and receive "+dutchcoin+" percent more coin but have "+_FZKV+" less pop!"); _ZXUG(_OXHF, _CILI, _XTLH); _ZXUG(_KXOP, _CILI, _NFET); } if (_LIRI == _VSCX) { _HCUY("_OUOY"); _QECI(_CILI, _DKUZ, 1); _NTAT("Strelet", _CILI, 17, "2.0*0.25*"+50); _NTAT("Settler", _CILI, 17, "2.0*0.1*"+100); _NTAT("Musketeer", _CILI, 15, "2.0*0.25*"+25); _NTAT("Musketeer", _CILI, 17, "2.0*0.25*"+75); _NTAT("Halberdier", _CILI, 15, "2.0*0.25*"+70); _NTAT("Halberdier", _CILI, 17, "2.0*0.25*"+50); _UVZI(_CILI, _SNHH, _OGVL); _HLUI(_CILI, _SNHH, _OGVL); _UVZI(_CILI, _SNHH, _OGVL); _HLUI(_CILI, _SNHH, _OGVL); _QECI(_CILI, _VQNQ, 1); for(i=1;<=6) { _ZSLZ(_CILI, " "); } _FCIE("Unforbid and Enable Unit"); _XPHB("PlayerID", _CILI); _FHDA("ProtoUnit", "Outpost"); _FCIE("Forbid and Disable Unit"); _XPHB("PlayerID", _CILI); _FHDA("ProtoUnit", "Blockhouse"); _CMOF("_LCHH"+_CILI, "+", ""+_OWUX); _NTAT("FortFrontier", _CILI, 7, ""+_OWUX); for(var1=1;<=_PPPS) { if(_UACB(var1, "Spawn")!=""&&_UACB(var1, "HeavyArt")=="") { _NTAT(_UACB(var1), _CILI, 0, "-1.0*"+_NCBX+"*"+_ITLL(_UACB(var1))); } if(_UACB(var1, "Spawn")!=""&&_UACB(var1, "HeavyArt")!="") { _NTAT(_UACB(var1), _CILI, 0, "-1.0*"+_NCBX+"*("+_ITLL(_UACB(var1))+"-200)"); } } _NTAT("xpSkullKnight", _CILI, 0, _NCBX+"*100"); _BZNC(_CILI, _CSMP); int _UWZK = 100-(100*_WHMS); int _CTKA = 100*_NCBX; _ZXUG(_XTYV, _CILI, "As Russian, Pop Cap is "+_OWUX+" higher and spawn units spawn 40 percent faster, but have "+_CTKA+" percent less hp!"); _ZXUG(_OXHF, _CILI, _CSMP); _ZXUG(_KXOP, _CILI, _CUKE); } if (_LIRI == _GGBW) { _HCUY("_OUOY"); _NTAT(_ZBMN, _CILI, 15, "100"); _NTAT(_MGQO, _CILI, 15, "100"); _NTAT(_OKET, _CILI, 15, "100"); _NTAT(_LYHN, _CILI, 15, "100"); _SVKN(5, _ZBMN, 3,4); _ZQLY(5, _MGQO, 4,5); _QNWC(5, _OKET, 3,5); _MBVB(5, _LYHN, 3,5); int _GXKS = 100*_XXZR; _ZXUG(_XTYV, _CILI, "As German, mercenaries spawn at "+_UFNU+" coin, but everything is "+_GXKS+" percent more expensive!"); _BZNC(_CILI, _XOHG); _ZXUG(_OXHF, _CILI, _XOHG); _ZXUG(_KXOP, _CILI, _PZSH); } if (_LIRI == _KFNQ) { if(_YYTK==0) { _HCUY("_OUOY"); _CMOF("SpawnCost"+_CILI, "-", ""+_IXJS); } _BZNC(_CILI, _MGNK); _ZXUG(_XTYV, _CILI, "As Ottoman, spawn units require "+_IXJS+" less coin but you cannot spawn artillery!"); _ZXUG(_OXHF, _CILI, _MGNK); _ZXUG(_KXOP, _CILI, _KLJU); } if(_LIRI==_MWHH) { _BZNC(_CILI, mercAztec); _ZXUG(_XTYV, _CILI, "As Aztec, spawned heavy infantry have "+(100*aztechp)+" percent more hp and more speed, but no cavalry spawn!"); _ZXUG(_OXHF, _CILI, mercAztec); _ZXUG(_KXOP, _CILI, ReAztec); _HCUY("_OUOY"); for(var1=1;<=_PPPS) { if(_UACB(var1, "HInf")!=""&&_UACB(var1, "Spawn")!="") { _NTAT(_UACB(var1), _CILI, 1, ""+aztecsp); _NTAT(_UACB(var1), _CILI, 0, aztechp+"*"+_ITLL(_UACB(var1))); } } } if(_LIRI==_QPOX) { rmCreateTrigger("_ZEEW"+_CILI); rmCreateTrigger("_HQOU"+_CILI); _HCUY("_ZEEW"+_CILI, 1, "Loop"); _SDNV("_ZKAO"+_CILI, "<=", "trGetStatValue("+_CILI+", 2)-"+_JURS); _CMOF("_ZKAO"+_CILI, "+", ""+_JURS); _QUVP(_CILI, "Speed"); _HCUY("_HQOU"+_CILI, 1, "Loop", "Run"); _HTUO(1); _YKXJ(_CILI, "Gold", "-1"); _BZNC(_CILI, _QGSC); _ZXUG(_XTYV, _CILI, "As Sioux, you get a speed upgrade every "+_JURS+" kills, but coin decays 1 per second! Popcap is 100, NOT 200."); _ZXUG(_OXHF, _CILI, _QGSC); _HCUY("_OUOY"); _HPKX("_ZKAO"+_CILI, "0"); _HLUI(_CILI, _EQZN); _MPJJ("_ZEEW"+_CILI); _MPJJ("_HQOU"+_CILI); } if(_LIRI==_WEWN) { _BZNC(_CILI, "xpRam"); _ZXUG(_XTYV, _CILI, "As Iroquois, you receive stronger reinforcements, strong buyable rams, and hand cavalry with seige bonus!"); _ZXUG(_OXHF, _CILI, "NatTomahawk"); _ZXUG(_KXOP, _CILI, _WICK); _HCUY("_OUOY"); _QECI(_CILI, _ANNY, 2); } } void _EDUP(int _KCZL=0, string _MHEC="", string _HWUS="", string _KDNE="", string _VDCP="", int _DUUV=0, int _LBKL=0, int _PJMP=0, int _CILI=0, string _QVQR="") { int _FDCY = 1; int _VNMT = cNumberNonGaiaPlayers; if(_CILI!=0) { _FDCY = _CILI; _VNMT=_CILI; } if(_KCZL==0) { for(i=_FDCY;<=_VNMT) { rmCreateTrigger(_OOEF+"_"+_OEJU+"_Rep_"+i); for(var1=0;<=3) { rmCreateTrigger(_OOEF+"_"+_OEJU+"_"+var1+"_"+i); } } } if(_MHEC=="Begin") {_HCUY("Fire4");} for(i=_FDCY;<=_VNMT) { if(_MHEC!="Begin") { if(_KCZL==0) {_HCUY(_OOEF+"_"+_GWHR(_NTOA, i)+"_0_"+i);} if(_KCZL!=0) {_HCUY(_OOEF+"_"+_OEJU+"_0_"+i);} } _MPJJ(_OOEF+"_"+_OEJU+"_"+_KCZL+"_"+i); } if(_MHEC=="Store") { _WQNK=_OOEF+"_"+_OEJU+"_"+_KCZL+"_"; if(_HWUS=="Buy"||_HWUS=="Spc") _LBBB("x"+_HWUS, _VDCP, _KDNE, _KDNE, _DUUV, _PJMP, -1, -1, "", _LBKL, _QVQR, _CILI); if(_HWUS=="GP") _LBBB("x"+_HWUS, _QEOJ, _VDCP, _KDNE, _DUUV, _PJMP, 4, -5, "", _LBKL, _QVQR, _CILI); if(_HWUS=="Upg") { string upgstring = _VDCP; if(_VDCP=="BuildingAttack") upgstring = "Building Attack"; _LBBB("x"+_HWUS, upgstring, _VDCP, _KDNE, _DUUV, _PJMP, -1, -1, "", _LBKL, _QVQR, _CILI); } } for(i=_FDCY;<=_VNMT) { _HCUY(_OOEF+"_"+_OEJU+"_"+_KCZL+"_"+i, 1); _SDNV(_OOEF+"Bank"+i, ">=", ""+_OEJU); _SDNV("_HLSY"+i, "==", ""+1); if(_KCZL==0) { _VPVA = rmCreateObjectDef(_OOEF+_OEJU+_KCZL+_XZBC+i); rmAddObjectDefItem(_VPVA,"CinematicBlock",1,0.0); rmSetObjectDefAllowOverlap(_VPVA, true); if(_OOEF=="Kills") {rmPlaceObjectDefAtLoc(_VPVA, i, _GXIE, _GXIE, 1);} if(_OOEF=="XP") {rmPlaceObjectDefAtLoc(_VPVA, i, _PJSR, _PJSR, 1);} _CIHP(Award_SRC, i, rmGetUnitPlaced(_VPVA, 0)); _FQGV(i, _CBBC+"has reached "+_OEJU+" "+_OOEF+"!</color>"); _RYYE(""+_GWHR(Award_SRC, i), ""+_XZBC); _QDXG("if(kbIsPlayerHuman("+i+")==false) {"); _THYN(_GWHR(Award_SRC, i)); _QDXG("}"); _QDXG("_KLNI("+i+", \""+_OOEF+"\", \""+_LIVF(_XZBC)+"\", \""+_HWUS+"\", \""+_KDNE+"\", \""+_VDCP+"\");"); if(_OOEF=="Kills") { var9=_GWHR(xksrc, rmRandInt(1,3)); var4=rmXFractionToMeters(_GXIE); var5=rmZFractionToMeters(_GXIE); } if(_OOEF=="XP") { var9=_GWHR(xxpsrc, rmRandInt(1,3)); var4=rmXFractionToMeters(_PJSR); var5=rmZFractionToMeters(_PJSR); } _QDXG("if(kbIsPlayerHuman("+i+")==false) trUnitMoveToUnit(\"\"+"+var9+");"); _OMDX(""+i, ""+15, var4+",0,"+var5); _MPJJ(_OOEF+"_"+_OEJU+"_Rep_"+i); _HCUY(_OOEF+"_"+_OEJU+"_Rep_"+i, 1, "Loop"); _HTUO(12); _SDNV("_HLSY"+i, "==", ""+1); if(_OOEF=="Kills") _XEUM(_BOYG, i, _XZBC, ""+6, "==", ""+1); if(_OOEF=="XP") _XEUM(_POEY, i, _XZBC, ""+6, "==", ""+1); _QDXG("_KLNI("+i+", \""+_OOEF+"\", \""+_LIVF(_XZBC)+"\", \""+_HWUS+"\", \""+_KDNE+"\", \""+_VDCP+"\", true);"); } if(_KCZL!=0) { if(_OOEF=="Kills") _XEUM(_GWHR(xksrc, _KCZL), i, _XZBC, ""+6, "==", ""+1); if(_OOEF=="XP") _XEUM(_GWHR(xxpsrc, _KCZL), i, _XZBC, ""+6, "==", ""+1); if(_MHEC=="Unit") { _ABJR(i, "Special"); _QEOJ="one "+_LIVF(_HWUS); if(_KDNE!="") _QEOJ=_KDNE; _ZMII(i, spawn, _HWUS, _DUUV); if(_DUUV==1) _FQGV(i, _CBBC+"has received "+_QEOJ+" for "+_OEJU+" "+_OOEF+"!</color>"); if(_DUUV!=1) { if(_LBKL==0) {_FQGV(i, _CBBC+"has received "+_DUUV+" "+_LIVF(_HWUS)+" units for "+_OEJU+" "+_OOEF+"!</color>");} } } if(_MHEC=="Upgrade") { _QUVP(i, _HWUS, ""+_DUUV); _ZVHH=_HWUS; if(_ZVHH=="BuildingAttack") _ZVHH="Building Attack"; _FQGV(i, _CBBC+"has received "+_DUUV+" "+_ZVHH+" upgrade(s) for "+_OEJU+" "+_OOEF+"!</color>"); } if(_MHEC=="Mod") { int awardmodtype = 0; for(var1=1;<=_PPPS) { if(_UACB(var1, _HWUS)!="") { awardmodtype=1; _NTAT(_UACB(var1), i, _DUUV, _VDCP); } } if(awardmodtype==0) _NTAT(_HWUS, i, _DUUV, _VDCP); _FQGV(i, _CBBC+"has received "+_KDNE+" for "+_OEJU+" "+_OOEF+"!</color>"); } if(_MHEC=="Tech") { for(var7=1;<=_DUUV) { _UQDS(i, _LBKL, "Unobtainable"); _UQDS(i, _LBKL, "Active"); } _QEOJ=_DUUV+" "+_KDNE; if(_HWUS!="") _QEOJ=_HWUS; _FQGV(i, _CBBC+"has received "+_QEOJ+" for "+_OEJU+" "+_OOEF+"!</color>"); } if(_MHEC=="Store") { var7=-1; var8=-1; if(_HWUS=="GP") {var7=4; var8=-5;} _FCIE("Army Deploy"); rmSetTriggerEffectParamArmy("SrcArmy", i, spawn); _FHDA("ProtoName", _KDNE); _FHDA("Location",rmXFractionToMeters(_TREH(_OQKH(_KVAK, i), var7))+",1,"+rmZFractionToMeters(_XIFB(_OQKH(_VLAV, i), var8))); _FHDA("Count", ""+1); _XPHB("Heading", 0); _FHDA("Clear", "true"); if(_HWUS=="Upg") _FQGV(i, _CBBC+"can buy "+_NRVY+" upgrades now for "+_OEJU+" "+_OOEF+"!</color>"); if(_HWUS=="Buy"||_HWUS=="Spc") _FQGV(i, _CBBC+"can buy "+_VDCP+" purchases now for "+_OEJU+" "+_OOEF+"!</color>"); if(_HWUS=="GP") _FQGV(i, _CBBC+"can buy "+_NRVY+" now for "+_OEJU+" "+_OOEF+"!</color>"); _WNDQ(i); } if(_MHEC=="Spawn") { _FCIE("Army Deploy"); rmSetTriggerEffectParamArmy("SrcArmy", i, spawn); _FHDA("ProtoName", _HWUS); _FHDA("Location",rmXFractionToMeters(_OQKH(_KSWF, i))+",1,"+rmZFractionToMeters(_OQKH(_ZSDB, i))); _FHDA("Count", ""+1); _XPHB("Heading", 0); _FHDA("Clear", "true"); _FQGV(i, _CBBC+"can spawn "+_LIVF(_HWUS)+" units at any Coin level for "+_OEJU+" "+_OOEF+"!</color>"); _NSKW(i); } if(_MHEC=="Other") { if(_HWUS=="Pop") { _CMOF("_LCHH"+i, "+", ""+_DUUV); _NTAT("FortFrontier", i, 7, ""+_DUUV); _QDXG("int _QTRC=_SDNV(\"_LCHH"+i+"\");"); _FQGV(i, _CBBC+"has a \"+_QTRC+\" pop cap now for "+_OEJU+" "+_OOEF+"!</color>"); } if(_HWUS=="Coincap") { _CMOF("_RFFV"+i, "+", ""+_DUUV); _QDXG("int _VVVT=_SDNV(\"_RFFV"+i+"\");"); _FQGV(i, _CBBC+"can have a maximum of \"+_VVVT+\" coin now for "+_OEJU+" "+_OOEF+"!</color>"); } if(_HWUS=="FortRepair") { _NTAT("FortFrontier", i, 4, _KDNE+"*_SDNV(\"_PEKK"+i+"\")"); _NTAT("FortFrontier", i, 15, _VDCP+"*_SDNV(\"_QMCU"+i+"\")"); _CMOF("_PEKK"+i, "+", _KDNE+"*_SDNV(\"_PEKK"+i+"\")"); _CMOF("_QMCU"+i, "+", _VDCP+"*_SDNV(\"_QMCU"+i+"\")"); _FQGV(i, _CBBC+"has received "+_DUUV+" percent to Fort repair rate and cost for "+_OEJU+" "+_OOEF+"!</color>"); } if(_HWUS=="Revolt") { _QDXG("_CKJQ("+i+", \""+_KDNE+"\");"); _FQGV(i, _CBBC+"has received Revolution and transformed all Spawned Units to "+_LIVF(_KDNE)+"s for "+_OEJU+" "+_OOEF+"!</color>"); _CWGX("BattlecryLarge.wav"); } } _RYYE(""+_GWHR(Award_SRC, i), "CinematicBlock"); _CIHP(_NTOA, i, _OEJU); if(_KCZL!=1) { _FCIE("Disable Trigger"); _XPHB("EventID", rmTriggerID(_OOEF+"_"+_OEJU+"_1_"+i)); } if(_KCZL!=2) { _FCIE("Disable Trigger"); _XPHB("EventID", rmTriggerID(_OOEF+"_"+_OEJU+"_2_"+i)); } if(_KCZL!=3) { _FCIE("Disable Trigger"); _XPHB("EventID", rmTriggerID(_OOEF+"_"+_OEJU+"_3_"+i)); } _FCIE("Disable Trigger"); _XPHB("EventID", rmTriggerID(_OOEF+"_"+_OEJU+"_Rep_"+i)); } } } void _WINS() { _FQCK("void _PRYJ(int p=0) {"); _VZUH(_RVQT, _VPPA); _FNHY("_HLSY\"+p+\"", "1"); _JAVW("Outpost", 2, "-12"); _JAVW("CoveredWagon", 0, "-99999"); _JAVW("CoveredWagon", 1, "-99999"); _JAVW("CoveredWagon", 2, "-999"); _JAVW("Factory", 10, "1"); _JAVW("FortFrontier", 10, "1"); _FQCK("trPlayerSetHCAccess(p, false);"); _JAVW(_OJWA, 0, ""+999999); _JAVW(_OJWA, 2, ""+10); _JAVW(_YYZP, 2, ""+10); _JAVW(_YYZP, 1, ""+5); _JAVW(_UTEI, 1, ""+5); _FQCK("_HPKX(\"_KZFB\"+p, trPlayerResourceCount(p, \"Xp\"));"); _FQCK("_HPKX(\"_LDJI\"+p, trPlayerResourceCount(p, \"Xp\"));"); _FQCK("_HPKX(\"_GAGI\"+p, trGetStatValue(p, 2));"); _FQCK("trQuestVarSetFromRand(\"_UQCI\", "+_MCNL+", "+_HQOD+", true);"); _FNHY("_RFFV\"+p+\"", ""+_RFFV); _FNHY("_LCHH\"+p+\"", ""+_LCHH); _FNHY("_EMSF\"+p+\"", "0"); _FNHY("_ZBHZ\"+p+\"", "0"); _FNHY("_FNWY\"+p+\"", "0"); _FNHY("_WMXX\"+p+\"", "0"); _FNHY("_GDPY\"+p+\"", "0"); _FNHY("_LRAX\"+p+\"", "0"); _JAVW(_LFVG, 0, ""+9999999); _JAVW(_LFVG, 1, "-9999"); _JAVW(_LFVG, 2, ""+_FION); _FNHY("FortHP\"+p+\"", ""+_HMSR); _JAVW("FortFrontier", 0, ""+(_HMSR-8500)); _JAVW("FortFrontier", 7, ""+_LCHH); _FNHY("_PEKK\"+p+\"", ""+_QCOZ); _JAVW("FortFrontier", 4, (_QCOZ-150)+""); _JAVW("Outpost", 4, "-49"); _FQCK("trForbidProtounit(p, \"TownCenter\");"); _FQCK("trForbidProtounit(p, \"FieldHospital\");"); _FQCK("trUnforbidProtounit(p, \"Outpost\");"); if(fortatk>1) { _JAVW("FortFrontier", 2, "-12*"+(fortatk-1)); _JAVW("FortFrontier", 14, "10-12*"+(fortatk-1)); _ANNA(_NOCK, "2*"+(fortatk-1)); } _JAVW("Outpost", 0, _JEEU+"-2000"); _JAVW("OutpostWagon", 0, ""+550); _JAVW(_CDDI, 0, ""+9999999); _JAVW(_CDDI, 16, "-300"); _FQCK("float _VICT=1.0;"); _FQCK("if(_RNLD(p)=="+_PHQG+") _VICT="+_QPMX+";"); _FQCK("if(_RNLD(p)=="+_GGBW+") _VICT=1.0+"+_XXZR+";"); _FNHY("_QMCU\"+p+\"", "_VICT*2*"+_IJIP); _JAVW("FortFrontier", 15, "_VICT*"+(_IJIP*2)); _JAVW("Outpost", 15, "_VICT*30"); _ANNA(_OTHO, "4"); _VZUH(_NOCK, _ZTSJ); _JAVW("Sheep", 0, "9999999"); _JAVW(_DWVX, 0, "-9999999"); _ANNA(_TCJT, ""+_FSKS); _FQCK("}"); _FQCK("void _HRXS(int p=0) {"); _JAVW(_UBFA, 1, ""+2); _JAVW(_AOVL, 1, ""+2); _JAVW(_ZYLN, 1, ""+2); _FQCK("trForbidProtounit(p, \"Wardog\");"); _JAVW("xpPetard", 0, "-75"); _JAVW("RussianCannon", 0, "-400"); _JAVW("RussianCannon", 1, "1"); _JAVW("RussianCannon", 6, "(0-8)+"+3); _JAVW("MercGreatCannon", 0, "-300"); _JAVW("Factory", 0, "-999999"); _JAVW("FactoryWagon", 1, "2"); _JAVW("FortWagon", 1, "2"); _JAVW("Reindeer", 1, "3"); _JAVW("TurkeyScout", 1, "3"); _JAVW("xpCoupRider", 6, "1"); _JAVW("xpRam", 6, "-1"); _JAVW("NatTomahawk", 6, "1"); _JAVW("SPCRailroadWorker", 1, "2"); _JAVW("SPCRailroadWorker", 6, "1"); _JAVW("SPCRailroadWorker", 15, "10"); _JAVW("OutlawMusketeer", 15, "10"); _JAVW("xpRam", 0, "0.5*"+_ITLL("xpRam")); _ANNA(_QTIH, "1"); _ANNA(_FHWB, "18"); _JAVW("xpAztecWarchief", 0, _EBEO+"*"+_ITLL("xpAztecWarchief")); _JAVW("xpLakotaWarchief", 0, _EBEO+"*"+_ITLL("xpLakotaWarchief")); _JAVW("xpIroquoisWarchief", 0, _EBEO+"*"+_ITLL("xpIroquoisWarchief")); _JAVW("GeorgeCrushington", 0, "-1*("+_ITLL("GeorgeCrushington")+"-"+_EXDT("GeorgeCrushington")+")"); _JAVW("MercRonin", 0, ""+_EXDT("MercRonin")); _JAVW("MercRonin", 1, ""+5.5); _JAVW("MercRonin", 6, "-3"); _JAVW("NatBolasWarrior", 6, "1"); _JAVW("NatBolasWarrior", 1, 5.0+"-4.5"); _JAVW("NatBolasWarrior", 0, "2050"); _ANNA(_RXBG, ""+((10*_EXDT("NatBolasWarrior"))/3)); _JAVW("NatBolasWarrior", 0, "-1.0*0.25*"+((10*_EXDT("NatBolasWarrior"))/3)+"*"+_ITLL("NatBolasWarrior")); _ANNA(_JBBH, ""+2); _JAVW("Oprichnik", 0, "-2.0*0.5*"+_ITLL("Oprichnik")); _JAVW("Oprichnik", 0, "2*"+_ITLL("Oprichnik")); _JAVW("NatAxeRiderDogSoldier", 6, ""+3); _JAVW("NatClubmanLoyal", 6, ""+1); _JAVW("Crossbowman", 6, ""+1); _JAVW("Crossbowman", 0, "500"); _ANNA(_HGXP, ""+40); _JAVW("Crossbowman", 0, "-1.0*0.2*"+40+"*"+_ITLL("Crossbowman")); _JAVW("xpSkullKnight", 0, "-100"); _FNHY("_XCLP\"+p+\"", "0"); _JAVW("SPCHoopThrowers", 1, ""+3); _JAVW("SPCHoopThrowers", 6, "-1"); _FQCK("}"); _FQCK("void _RGDL(int p=0) {"); _JAVW("IGCHarbormaster", 1, "4"); _JAVW("IGCCooper", 1, "3"); _JAVW("Drummer", 1, "2"); _JAVW("IGCFlagBearer", 1, "2"); _JAVW("IGCLizzie", 1, "3"); _JAVW("IGCKanyenkeHack", 1, "2"); _JAVW("IGCJaeger", 1, "1"); _JAVW("IGCSahin", 1, "2"); _JAVW("IGCAlain", 1, "2"); _JAVW("FlagBearerDefault", 1, "1"); _JAVW("IGCMorgan", 1, "2"); _JAVW("IGCStuart", 1, "2"); _JAVW("Mortar", 6, "-2"); _JAVW("xpPetard", 6, "2"); _JAVW(""+_HRCB+"", 1, "3"); _FQCK("}"); _FQCK("void _CUFD(int p=0) {"); for(var1=1;<=_PPPS) { if(_UACB(var1, "Artillery")!="") { if(_UACB(var1)=="Grenadier") _JAVW(_UACB(var1), 6, "1"); if(_UACB(var1)=="xpGatlingGun") _JAVW(_UACB(var1), 6, "2"); if(_UACB(var1)=="OrganGun") _JAVW(_UACB(var1), 6, "2"); if(_UACB(var1)=="Falconet") _JAVW(_UACB(var1), 6, "3"); if(_UACB(var1)=="Cannon") _JAVW(_UACB(var1), 6, "3"); if(_UACB(var1)=="GreatBombard") _JAVW(_UACB(var1), 6, "3"); if(_UACB(var1)=="Rocket") _JAVW(_UACB(var1), 6, "3"); if(_UACB(var1)=="xpHorseArtillery") _JAVW(_UACB(var1), 6, "3"); if(_UACB(var1, "Artillery")!=""&&_UACB(var1, "Cannons")!="") _JAVW(_UACB(var1), 14, "-4"); if(_UACB(var1, "Artillery")!=""&&_UACB(var1, "Cannons")!="") _JAVW(_UACB(var1), 2, "-8"); if(_UACB(var1, "HeavyArt")!=""&&_UACB(var1, "Spawn")!="") { _JAVW(_UACB(var1), 0, "-200"); } } } _FQCK("}"); _FQCK("void _KBEM(int p=0) {"); _CCEF( " "); _CCEF( " "); _CCEF( "<color=1,0,0><u>DEFAULT STORE ISLAND</u></color>"); _FQCK("}"); _FQCK("void _GSDY(int p=0) {"); _FQCK("trSetPlayerDefeated(p);"); _FNHY("_HLSY\"+p+\"", "0"); _FQCK("trSoundPlayFN(\"taunts\023 Shut Your Pie Hole.mp3\");"); _FQCK("trSoundPlayFN(\"buildingdeath.wav\");"); _FQCK("trChatSend(p, \""+_CBBC+"has been defeated!</color>\");"); _FQCK("}"); _FQCK("int _XWDR=0; int _NLFF=0; int _BFHV=0; int _YXZU=0;"); _FQCK("int scatrange=30; int _KJWO=0; int _CYHZ=0; int fiddla=0; int scatmag=0;"); _FQCK("int _WCOF=20;"); _FQCK("string isStealth(int _UCPA=0) {"); _FQCK("string bleh=kbGetProtoUnitName(kbGetUnitBaseTypeID(_UCPA));"); _FQCK("if(bleh==\"xpJaguarKnight\") return(bleh);"); _FQCK("if(bleh==\"xpMusketWarrior\") return(bleh);"); _FQCK("if(bleh==\"xpCoupRider\") return(bleh);"); _FQCK("return(\"\");"); _FQCK("}"); _FQCK("int _HERU(int i=0, int _UCPA=0) {"); _FQCK("_XWDR=xsGetContextPlayer(); xsSetContextPlayer(i);"); _FQCK("_NLFF=kbUnitQueryCreate(\"_HERU\");"); _FQCK("kbUnitQuerySetPlayerID(_NLFF, i);"); _FQCK("kbUnitQuerySetUnitType(_NLFF, _UCPA);"); _FQCK("kbUnitQuerySetPosition(_NLFF, kbGetMapCenter());"); _FQCK("kbUnitQuerySetMaximumDistance(_NLFF, kbGetMapXSize()*0.2);"); _FQCK("kbUnitQueryResetResults(_NLFF);"); _FQCK("_BFHV=kbUnitQueryExecute(_NLFF);"); _FQCK("_YXZU=kbUnitQueryGetResult(_NLFF, _BFHV-1);"); _FQCK("xsSetContextPlayer(_XWDR); return(_YXZU);}"); _FQCK("void _QJZD(int v=0) {"); _FQCK("_YXZU=_HERU(v, 406);"); _FQCK("_XWDR=xsGetContextPlayer(); xsSetContextPlayer(0); kbLookAtAllUnitsOnMap();"); _FQCK("for(p=1;<"+cNumberPlayers+") {"); _FQCK("if(p!=v) {"); _FQCK("_NLFF=kbUnitQueryCreate(\"vaarg\");"); _FQCK("kbUnitQuerySetPlayerID(_NLFF, p);"); _FQCK("kbUnitQuerySetUnitType(_NLFF, 838);"); _FQCK("kbUnitQuerySetState(_NLFF, 2);"); _FQCK("kbUnitQuerySetPosition(_NLFF, kbUnitGetPosition(_YXZU));"); _FQCK("kbUnitQuerySetMaximumDistance(_NLFF, 15);"); _FQCK("kbUnitQuerySetAscendingSort(_NLFF, true);"); _FQCK("kbUnitQueryResetResults(_NLFF);"); _FQCK("_BFHV=kbUnitQueryExecute(_NLFF);"); _FQCK("if(_BFHV>20) _BFHV=20;"); _FQCK("for(i=0;<_BFHV) {"); _FQCK("int _DHOY=kbUnitQueryGetResult(_NLFF, i);"); _FQCK("trUnitSelectClear(); trUnitSelectByID(_DHOY);"); _FQCK("trQuestVarSetFromRand(\"fiddler\", 0, scatrange, true);"); _FQCK("trQuestVarSetFromRand(\"fiddlera\", 0, 1, true); fiddla=_SDNV(\"fiddlera\");"); _FQCK("if(fiddla==0) _KJWO=xsVectorGetX(kbUnitGetPosition(_DHOY))+_SDNV(\"fiddler\");"); _FQCK("if(fiddla==1) _KJWO=xsVectorGetX(kbUnitGetPosition(_DHOY))-_SDNV(\"fiddler\");"); _FQCK("trQuestVarSetFromRand(\"fiddlera\", 0, 1, true); fiddla=_SDNV(\"fiddlera\");"); _FQCK("scatmag=scatrange-_SDNV(\"fiddler\");"); _FQCK("if(fiddla==0) _CYHZ=xsVectorGetZ(kbUnitGetPosition(_DHOY))+scatmag;"); _FQCK("if(fiddla==1) _CYHZ=xsVectorGetZ(kbUnitGetPosition(_DHOY))-scatmag;"); _FQCK("if(isStealth(_DHOY)!=\"\") trUnitChangeProtoUnit(isStealth(_DHOY));"); _FQCK("trUnitMoveToPoint(_KJWO, xsVectorGetY(kbUnitGetPosition(_DHOY)), _CYHZ, -1, false, true, 9999);"); _FQCK("trUnitHighlight(5, true);"); _FQCK("}}}xsSetContextPlayer(_XWDR);}"); _FQCK("void _VUAB() {"); _FQCK("_XWDR=xsGetContextPlayer(); xsSetContextPlayer(0); kbLookAtAllUnitsOnMap();"); _FQCK("for(p=1;<"+cNumberPlayers+") {"); _FQCK("_NLFF=kbUnitQueryCreate(\"vaarg\");"); _FQCK("kbUnitQuerySetPlayerID(_NLFF, p);"); _FQCK("kbUnitQuerySetUnitType(_NLFF, 838);"); _FQCK("kbUnitQuerySetState(_NLFF, 2);"); _FQCK("kbUnitQuerySetPosition(_NLFF, kbGetMapCenter());"); _FQCK("kbUnitQuerySetMaximumDistance(_NLFF, 15);"); _FQCK("kbUnitQueryResetResults(_NLFF);"); _FQCK("_BFHV=kbUnitQueryExecute(_NLFF);"); _FQCK("for(i=0;<_BFHV) {"); _FQCK("int _DHOY=kbUnitQueryGetResult(_NLFF, i);"); _FQCK("trUnitSelectClear(); trUnitSelectByID(_DHOY);"); _FQCK("trQuestVarSetFromRand(\"fiddler\", 0, _WCOF, true);"); _FQCK("trQuestVarSetFromRand(\"fiddlera\", 0, 1, true); fiddla=_SDNV(\"fiddlera\");"); _FQCK("if(fiddla==0) _KJWO=xsVectorGetX(kbGetMapCenter())+_SDNV(\"fiddler\");"); _FQCK("if(fiddla==1) _KJWO=xsVectorGetX(kbGetMapCenter())-_SDNV(\"fiddler\");"); _FQCK("trQuestVarSetFromRand(\"fiddlera\", 0, 1, true); fiddla=_SDNV(\"fiddlera\");"); _FQCK("scatmag=_WCOF-_SDNV(\"fiddler\");"); _FQCK("if(fiddla==0) _CYHZ=xsVectorGetZ(kbGetMapCenter())+scatmag;"); _FQCK("if(fiddla==1) _CYHZ=xsVectorGetZ(kbGetMapCenter())-scatmag;"); _FQCK("if(isStealth(_DHOY)!=\"\") trUnitChangeProtoUnit(isStealth(_DHOY));"); _FQCK("trUnitMoveToPoint(_KJWO, xsVectorGetY(kbGetMapCenter()), _CYHZ, -1, false, true, 9999);"); _FQCK("trUnitHighlight(5, true);"); _FQCK("}}xsSetContextPlayer(_XWDR);}"); _FQCK("void _CKJQ(int p=0, string _QBKD=\"\") {"); _FQCK("int _TEBI = xsGetContextPlayer(); xsSetContextPlayer(p);"); _FQCK("int _PPRQ=kbUnitQueryCreate(\"_CHZN\");"); _FQCK("kbUnitQuerySetPlayerID(_PPRQ, p);"); _FQCK("kbUnitQuerySetUnitType(_PPRQ, 838);"); _FQCK("kbUnitQuerySetState(_PPRQ, 2);"); _FQCK("kbUnitQuerySetPosition(_PPRQ, kbGetMapCenter());"); _FQCK("kbUnitQuerySetMaximumDistance(_PPRQ, kbGetMapXSize()*0.2);"); _FQCK("kbUnitQueryResetResults(_PPRQ);"); _FQCK("int _ISWB=kbUnitQueryExecute(_PPRQ);"); _FQCK("for(i=0;<_ISWB) {"); _FQCK("int _DHOY=kbUnitQueryGetResult(_PPRQ, i);"); _FQCK("if(_NCSA(_DHOY, p)==true) {"); _FQCK("trUnitSelectClear(); trUnitSelectByID(_DHOY);"); _FQCK("trUnitChangeProtoUnit(_QBKD);"); _FQCK("}}xsSetContextPlayer(_TEBI);}"); _FQCK("void _DJZZ(int p=0) {"); _FQCK("_YXZU=_HERU(p, 489);"); _FQCK("int _TEBI = xsGetContextPlayer(); xsSetContextPlayer(p); kbLookAtAllUnitsOnMap();"); _FQCK("int _SRUD=0;"); _FQCK("for(x=1;<"+cNumberPlayers+") {"); _FQCK("int _PPRQ=kbUnitQueryCreate(\"_DJZZ\");"); _FQCK("kbUnitQuerySetPlayerID(_PPRQ, x);"); _FQCK("kbUnitQuerySetUnitType(_PPRQ, 838);"); _FQCK("kbUnitQuerySetState(_PPRQ, 2);"); _FQCK("kbUnitQuerySetPosition(_PPRQ, kbUnitGetPosition(_YXZU));"); _FQCK("kbUnitQuerySetMaximumDistance(_PPRQ, 4);"); _FQCK("kbUnitQuerySetAscendingSort(_PPRQ, true);"); _FQCK("kbUnitQueryResetResults(_PPRQ);"); _FQCK("int _ISWB=kbUnitQueryExecute(_PPRQ);"); _FQCK("if(_ISWB>10) _ISWB=10;"); _FQCK("if(_SRUD<10) {"); _FQCK("for(i=0;<_ISWB) {"); _FQCK("int _DHOY=kbUnitQueryGetResult(_PPRQ, i);"); _FQCK("if(_NCSA(_DHOY, x)==true) {"); _FQCK("trUnitSelectClear(); trUnitSelectByID(_DHOY);"); _FQCK("trUnitChangeProtoUnit(\"SPCRailroadWorker\"); trUnitConvert(p);"); _FQCK("_SRUD=_SRUD+1;"); _FQCK("}}}}xsSetContextPlayer(_TEBI);}"); _FQCK("void _MZMM(int p=0) {"); _FQCK("if(_SDNV(\"_HLSY\"+p)==1) {"); _FQCK("if(_SDNV(\"_LDJI\"+p)<trPlayerResourceCount(p, \"Xp\")) {"); _FQCK("float _TOET=1.0*trPlayerResourceCount(p, \"Xp\")-_SDNV(\"_LDJI\"+p);"); _FQCK("_HPKX(\"_LDJI\"+p, trPlayerResourceCount(p, \"Xp\"));"); _FQCK("while(_TOET>=1000) _TOET=_TOET-1000;"); _FQCK("_HPKX(\"XPBank\"+p, _SDNV(\"XPBank\"+p)+_TOET);"); _FQCK("trPlayerGrantResources(p, \"Wood\", _SDNV(\"XPBank\"+p)-trPlayerResourceCount(p, \"Wood\"));"); _FQCK("if(_TOET>4) {"); _FQCK("_TOET=(1.0*_TOET-4)/"+_WYBX+";"); _FQCK("_HPKX(\"_UPJQ\"+p, _SDNV(\"_UPJQ\"+p)+_TOET);"); _FQCK("}}}"); _FQCK("}"); _FQCK("void _IZVE(int p=0) {"); _FQCK("float _AVGZ=((1.0*trGetStatValue(p, 2)-_SDNV(\"_GAGI\"+p))/"+_DUUN+");"); _FQCK("_HPKX(\"_UPJQ\"+p, (_SDNV(\"_UPJQ\"+p)+_AVGZ));"); _FQCK("_HPKX(\"_GAGI\"+p, trGetStatValue(p, 2));"); _FQCK("trPlayerGrantResources(p, \"Food\", trGetStatValue(p, 2)-trPlayerResourceCount(p, \"Food\"));"); _FQCK("_HPKX(\"KillsBank\"+p, trGetStatValue(p, 2));"); _FQCK("}"); _FQCK("void _PQKC() {"); _FQCK("for(i=1;<11) {"); _FQCK("trChatSend(0, \" \");"); _FQCK("}}"); _FQCK("void _KLNI(int p=0, string xty=\"Kills\","+" string awr=\"\", string aw1=\"\","+" string aw2=\"\", string aw3=\"\", bool awarr=false) {"); _FQCK("string _SSAM=\"\";"); _FQCK("if(xty==\"Kills\") {"); _FQCK("trChatSendToPlayer(0, p, \"<color=1,0,0>- - - <u>KILL AWARD (Free Stuff)</u> - - -</color>\");"); _FQCK("_SSAM=\"SOUTH ISLAND\";"); _FQCK("}"); _FQCK("if(xty==\"XP\") {"); _FQCK("trChatSendToPlayer(0, p, \"<color=1,0,0>- - - <u>XP AWARD (Additional Store Island Units)</u> - - -</color>\");"); _FQCK("_SSAM=\"NORTH ISLAND\";"); _FQCK("}"); _FQCK("string _LNDN=\"<color=0.4,1,1>\"+_SSAM+\"</color> - Move the \"+awr+\" to one of the following to receive an award:\";"); _FQCK("trChatSendToPlayer(0, p, _LNDN);"); _FQCK("trChatSendToPlayer(0, p, \"<color=1,0.2,0>- "+_LIVF(_RTES)+":</color> \"+aw1);"); _FQCK("trChatSendToPlayer(0, p, \"<color=0.5,1,0.5>- "+_LIVF(_JWHD)+":</color> \"+aw2);"); _FQCK("trChatSendToPlayer(0, p, \"<color=0.8,0.4,0>- "+_LIVF(_IZCO)+":</color> \"+aw3);"); _FQCK("if(awarr==true) {"); _FQCK("string _VILT=\"<color=0,1,0>~~ Move the \"+awr+\" away from the skulls to stop repeat. ~~</color>\";"); _FQCK("trChatSendToPlayer(0, p, _VILT);}"); _FQCK("}"); _FQCK("void _XSKY(int p=0, float unito1=0, float unito2=0, int radius=0) {"); _FQCK("int _TEBI = xsGetContextPlayer(); xsSetContextPlayer(p); kbLookAtAllUnitsOnMap();"); _FQCK("int _PPRQ=kbUnitQueryCreate(\"_XSKY\"+p);"); _FQCK("kbUnitQuerySetPlayerID(_PPRQ, p);"); _FQCK("kbUnitQuerySetUnitType(_PPRQ, 838);"); _FQCK("kbUnitQuerySetPosition(_PPRQ, xsVectorSet(unito1,0,unito2));"); _FQCK("kbUnitQuerySetMaximumDistance(_PPRQ, radius);"); _FQCK("kbUnitQuerySetState(_PPRQ, 2);"); _FQCK("kbUnitQueryResetResults(_PPRQ);"); _FQCK("int _ISWB=kbUnitQueryExecute(_PPRQ);"); _FQCK("for(i=0;<_ISWB) {"); _FQCK("int _DHOY=kbUnitQueryGetResult(_PPRQ, i);"); _FQCK("trUnitSelectClear(); trUnitSelectByID(_DHOY);"); _FQCK("int x=xsVectorGetX(kbUnitGetPosition(_DHOY));"); _FQCK("int y=xsVectorGetY(kbUnitGetPosition(_DHOY));"); _FQCK("int z=xsVectorGetZ(kbUnitGetPosition(_DHOY));"); _FQCK("trUnitMoveToPoint(x,y,z);"); _FQCK("}xsSetContextPlayer(_TEBI);}"); } void _CWVA() { if(_NZOM==1) { _HCUY("NomadTr"); for(_PTGR=1;<cNumberPlayers) { _QUVP(_PTGR, "Speed", "10.0/"+_QSOE); } _GDFN="All units have 10 speed!"; } if(_NZOM==2) { _YYTK=50; _HCUY("NomadTr"); for(_PTGR=1;<cNumberPlayers) { _CMOF("SpawnCost"+_PTGR, "-", ""+_YYTK); } _GDFN="You can spawn 50-75 coin level units at any time!"; } if(_NZOM==3) { _WWQQ=0; _GDFN="Costs do not increase for anything."; } if(_NZOM==4) { _TMIU=-0.5; _GDFN="Coin comes super fast!"; } if(_NZOM==5) { _AIHF = 60; _SHCC = 60; _GDFN="Reinforcements come every minute!"; } if(_NZOM==6) { _HCUY("NomadTr"); for(_PTGR=1;<cNumberPlayers) { _UQDS(_PTGR, _XHUU, "Active"); } _GDFN="You see all your enemies!"; } if(_NZOM==7) { _HCUY("NomadTr"); for(_PTGR=1;<cNumberPlayers) { _CMOF("_LCHH"+_PTGR, "+", ""+50); _CMOF("_RFFV"+_PTGR, "+", ""+50); _NTAT("FortFrontier", _PTGR, 7, ""+50); } _GDFN="Coin and Pop Cap have been increased by 50!"; } if(_NZOM==8||_NZOM==11||_NZOM==12) { _RXBL="tiny"; _TZYD=0.5; _GDFN="The map shrunk!"; } if(_NZOM==9) { _HNKI="MercRonin"; _GDFN="Reinforcements come with "+_OSRJ+" Super Ronin!"; } if(_NZOM==10) { _OWKV=0.5; _GDFN="Spawn is super fast!"; } } void main(void) { rmSetStatusText("",1.00); if(cNumberNonGaiaPlayers>5) _RTWQ=0.5; _KVAK=xsArrayCreateFloat(cNumberPlayers, 0, "StoreXCoord"); _VLAV=xsArrayCreateFloat(cNumberPlayers, 0, "StoreZCoord"); _KSWF=xsArrayCreateFloat(cNumberPlayers, 0, "SpawnIslXCoord"); _ZSDB=xsArrayCreateFloat(cNumberPlayers, 0, "SpawnIslZCoord"); _VQID=xsArrayCreateInt(cNumberPlayers, 0, "Plyr Fort"); _HTBC=xsArrayCreateInt(cNumberPlayers, 0, "SpcSel"); _MPPH=xsArrayCreateInt(cNumberPlayers, 0, "_MPPH"); _KUHS=xsArrayCreateString(6, "", "HInfProtos"); _XORP=xsArrayCreateInt(6, 0, "HInfCounts"); _UFWH=xsArrayCreateInt(6, 0, "HInfTime"); _JRUT=xsArrayCreateString(6, "", "LInfProtos"); _KSSL=xsArrayCreateInt(6, 0, "LInfCounts"); _HLRX=xsArrayCreateInt(6, 0, "LInfTime"); _LYDX=xsArrayCreateString(6, "", "HCavProtos"); _VKOS=xsArrayCreateInt(6, 0, "HCavCounts"); _AGGM=xsArrayCreateInt(6, 0, "HCavTime"); _PBGZ=xsArrayCreateString(6, "", "LCavProtos"); _VBAF=xsArrayCreateInt(6, 0, "LCavCounts"); _AZJO=xsArrayCreateInt(6, 0, "LCavTime"); _HQSS=xsArrayCreateString(6, "", "ArtProtos"); _WTOR=xsArrayCreateInt(6, 0, "ArtCounts"); _CKQA=xsArrayCreateInt(6, 0, "ArtTime"); _XSRE=xsArrayCreateInt(cNumberPlayers, 0, "StartH_Inf"); _HNRL=xsArrayCreateInt(cNumberPlayers, 0, "StartL_Inf"); _YJIW=xsArrayCreateInt(cNumberPlayers, 0, "StartH_Cav"); _TMHG=xsArrayCreateInt(cNumberPlayers, 0, "StartL_Cav"); _LKOZ=xsArrayCreateInt(cNumberPlayers, 0, "StartArt"); _FKMM=xsArrayCreateInt(cNumberPlayers, 0, "StartCulv"); _XTYV=xsArrayCreateString(cNumberPlayers, "", "PlBonuses"); _OXHF=xsArrayCreateString(cNumberPlayers, "", "PLReinsA"); _KXOP=xsArrayCreateString(cNumberPlayers, "", "PLReinsB"); _VYBJ=xsArrayCreateString(cNumberPlayers, "", "PMercs"); _NTOA=xsArrayCreateInt(cNumberPlayers, 0, "oldawardrec"); _MZOT=xsArrayCreateInt(cNumberPlayers, 0, "infoguy"); xksrc=xsArrayCreateInt(4, 0, "kguy"); xxpsrc=xsArrayCreateInt(4, 0, "xguy"); Award_SRC=xsArrayCreateInt(cNumberPlayers, 0, "Awarguy"); _XVFB(); _FQCK("int CUIA(string u=\"\", int p=0, string U=\"\", int r=0) {"); _FQCK("return(trCountUnitsInArea(u,p,U,r));}"); _FQCK("int CUIA2(string u=\"\", int p=0) {"); _FQCK("return(trCountUnitsInArea(u,p,\"Unit\",6));}"); _FQCK("int ppop(int p=0) {"); _FQCK("return(trPlayerGetPopulation(p));}"); _FQCK("float _SDNV(string u=\"\") {"); _FQCK("return(trQuestVarGet(u));}"); _FQCK("void _HPKX(string u=\"\", float x=0.0) {"); _FQCK("trQuestVarSet(u, x);}"); _FQCK("int _RNLD(int p=0) {"); for(i=1; <=cNumberNonGaiaPlayers) { _FQCK("if(p=="+i+") {return("+rmGetPlayerCiv(i)+");}"); } _FQCK("return(0);"); _FQCK("}"); _FQCK("bool _NCSA(int unitid=0, int p=0) {"); _FQCK("string _BFVI=kbGetProtoUnitName(kbGetUnitBaseTypeID(unitid));"); for(i=50;<=_PPPS) { if(_UACB(i, "Spawn")!=""&&_UACB(i, "Cannon")=="") _FQCK("if(\""+_UACB(i, "Spawn")+"\"==_BFVI) return(true);"); } _FQCK("if(_RNLD(p)=="+_GGBW+") {"); _FQCK("if(\""+_ZBMN+"\"==_BFVI) return(true);"); _FQCK("if(\""+_MGQO+"\"==_BFVI) return(true);"); _FQCK("if(\""+_OKET+"\"==_BFVI) return(true);"); _FQCK("if(\""+_LYHN+"\"==_BFVI) return(true);"); _FQCK("}"); _FQCK("return(false);}"); rmSetStatusText("",0.99); _TTEY("Attack"); rmSetStatusText("",0.97); _TTEY("Multipliers"); rmSetStatusText("",0.95); _TTEY("HP"); _TTEY("Heal"); rmSetStatusText("",0.93); _TTEY("Speed"); rmSetStatusText("",0.91); _TTEY("LOS"); rmSetStatusText("",0.89); _TTEY("BuildingHP"); rmSetStatusText("",0.87); _TTEY("BuildingAttack"); rmSetStatusText("",0.81); _WINS(); rmSetStatusText("",0.75); _CGKC(); rmCreateTrigger("_GSDD"); _HCUY("_GSDD"); rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "\"); }} /*", false); _FQCK("void _ZMRE(int p=0) {"); _JPDY("FortFrontier"); _JPDY("Outpost"); if(_KOAU==0) {_JPDY(_VSCM);} for(var1=1;<=_PPPS) { if(_UACB(var1, "Merc")!="") _JPDY(_UACB(var1)); } _JPDY("xpRam"); _JPDY("xpArrowKnight"); rmCreateTrigger("_KOIA"); _HCUY("_KOIA"); rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "\"); }} /*", false); _FQCK("void _KOIA(int p=0, float xchange=1.0) {"); rmCreateTrigger("NomadTr"); if(rmGetNomadStart()) { _HCUY("NomadTr", 5, "Run"); _NZOM=rmRandInt(1,12); _CWVA(); } if(_KOAU==1) { _VSCM = " "; _PSAJ = " "; } _YCXF = 16+(2*cNumberNonGaiaPlayers); int _TKBX=rmRandInt(1,4); int _OTDI=0; int _RXXG=rmRandInt(0,1); int _VZQM=0; string _EYRO="Water"; float _VFIC = 0.0; float _HQNI=0; int _VFJZ=0; float _AUQF=1.8; string _DFTG=""; float _MOPS = 1; float _RGPU = 0; float _GXTU = 0; string _HLCV = "Mix"; string _SPIH = ""; string _AZRS = "Terrain"; string _SFSZ = "great_plains\groundspc_nonpass_gp"; int _WXBQ = 0; int _MURW = 4; string _MXCD=""; string _BHUM=""; string _RGJQ = "Mix"; string _MVNK = ""; string _YRTN = "Mix"; string _SJVW = ""; string _ZXSS = "Terrain"; string _QXNJ = "great_plains\groundspc_nonpass_gp"; string _OMUY = ""; string _JNJU = ""; string _WRSY = ""; string _XWQY = ""; int _YXCS = 50; int _ZPOK = 100; float _LWJD = 1; string _RLTB=""; string _SCIE="Mix"; float _DPIW=0.5; int _LAQI = 0; int _GESJ = 0; float _SQHS = 1; float _LMWA = 1; float _NRXR = 4; float _FNWA = 7; string _KZTG=""; string _TIZI=""; float _OJLJ=0; if(_TKBX==1) { _OTDI=rmRandInt(1,2); var1=rmRandInt(1,2); if(var1==2) _UBFA="TurkeyScout"; _SPIH = "caribbean grass"; _MVNK = "carolina_grass"; _SJVW = "pampas_grass"; _OMUY = "Caribbean"; _XWQY = "Caribbean Palm Forest"; _KZTG="TreeCaribbean"; _JNJU = "Amazon River"; _YXCS = 100; _ZPOK = 200; _LWJD = 1.25; if(_OTDI==1) { _MOPS = 1; _RGPU = 0; _GXTU = 0; _WRSY = "306a_caribbean"; if(_RXXG==1) { _SQHS = 1.15; _RLTB="caribbean grass"; _LAQI = 150; _GESJ = 300; } if(_VZQM==1) { _TIZI="Rain"; _OJLJ=0.1; _WRSY="309a_summoned"; } } if(_OTDI==2) { _EYRO="caribbean grass"; _VFJZ=1; _HQNI=-25; _MOPS=-25; _RGPU=25; if(_RXBL=="tiny") { _HQNI=-8; _MOPS=-8; _RGPU=8; } _GXTU=1.0; _WRSY = "amsterdam"; _DFTG = "caribbean grass"; if(_RXXG==1) { _SQHS = 1.2; _RLTB="caribbean grass"; _LAQI = 125; _GESJ = 200; _LMWA = 0.55; } if(_VZQM==1) { _TIZI="Rain"; _OJLJ=0.1; _WRSY="amsterdam evening"; } } } if(_TKBX==2) { _OTDI=rmRandInt(1,3); _YXCS=75; _ZPOK=200; if(_OTDI==1) { _MOPS=2; _SPIH = "rockies_snow"; _SFSZ = "great_lakes\ground_ice3_gl"; _MVNK = "rockies_snow"; _SJVW = "yukon snow"; _QXNJ = "great_lakes\ground_ice3_gl"; _OMUY = "Rocky Mountain2"; _JNJU = "Great Lakes Ice"; _WRSY = "yukon"; _XWQY = "Yukon Snow Forest"; _KZTG="TreeYukon"; _TIZI="Snow"; _OJLJ=0.1; if(_RXXG==1) { _SQHS = 1.15; _RLTB="rockies_snow"; _LAQI = 100; _GESJ = 200; _LMWA = 1.5; } if(_VZQM==1) { _WRSY="st_petersburg"; } } if(_OTDI==2) { _MOPS=2; _SPIH = "rockies_snow"; _SFSZ = "great_lakes\ground_ice3_gl"; _MVNK = "rockies_snow"; _SJVW = "yukon snow"; _QXNJ = "great_lakes\ground_ice3_gl"; _OMUY = "Rocky Mountain2"; _JNJU = "Great Lakes Ice"; _WRSY = "yukon"; _XWQY = "Christmas Forest"; _CDDI = "TreeChristmas"; _UBFA = "Reindeer"; _KZTG="TreeChristmas"; _TIZI="Snow"; _OJLJ=0.1; if(_RXXG==1) { _RLTB="rockies_snow"; _LAQI = 100; _GESJ = 250; _LMWA = 1.8; } if(_VZQM==1) { _WRSY="319a_snow"; } } if(_OTDI==3) { _VFJZ=1; _EYRO="rockies_snow"; _HQNI=-25; _MOPS=-25; _RGPU=25; if(_RXBL=="tiny") { _HQNI=-8; _MOPS=-8; _RGPU=8; } _GXTU=1.0; _SPIH = "rockies_snow"; _SFSZ = "great_lakes\ground_ice3_gl"; _MVNK = "rockies_snow"; _SJVW = "yukon snow"; _QXNJ = "great_lakes\ground_ice3_gl"; _OMUY = "Rocky Mountain2"; _JNJU = "Great Lakes Ice"; _WRSY = "amsterdam"; _XWQY = "Yukon Snow Forest"; _DFTG = "yukon snow"; _KZTG="TreeYukon"; _TIZI="Snow"; _OJLJ=0.1; if(_RXXG==1) { _SQHS = 0.75; _RLTB="rockies_snow"; _LAQI = 125; _GESJ = 200; _LMWA = 0.55; } } } if(_TKBX==3) { _OTDI=rmRandInt(1,2); _OTDI=1; if(_OTDI==1) { _MOPS=1; _SPIH = "pampas_grass"; _MVNK = "pampas_dirt"; _SJVW = "texas_dirt"; _OMUY = "Texas"; _JNJU = "Great Plains Pond"; _WRSY = "pampas"; _XWQY = "Pampas Forest"; _KZTG="TreePampas"; } if(_OTDI==2) { _VFJZ=1; _EYRO="sonora\ground3_son"; _HQNI=-25; _MOPS=-25; _RGPU=25; if(_RXBL=="tiny") { _HQNI=-8; _MOPS=-8; _RGPU=8; } _GXTU=0.9; _SPIH = "pampas_grass"; _MVNK = "pampas_dirt"; _SJVW = "texas_dirt"; _OMUY = "Texas"; _JNJU = "Great Plains Pond"; _WRSY = "berlin dusk"; _XWQY = "Pampas Forest"; _DFTG = "pampas_grass"; _KZTG="TreePampas"; } } if(_TKBX==4) { _OTDI=rmRandInt(1,2); _YXCS = 20; _ZPOK = 30; _LWJD = 5; if(_OTDI==1) { _AUQF=1; _VFJZ=1; _MOPS = -5; _RGPU = 5; _GXTU = 0.75; _SPIH = "bayou_forest"; _MVNK = "bayou_forest"; _SJVW = "amazon grass"; _MXCD = "Bayou"; _BHUM = "Big"; _OMUY = "Bayou"; _JNJU = "Bayou"; _WRSY = "306a_caribbean"; _XWQY = "Bayou Swamp Forest"; _KZTG="TreeBayouMarsh"; _RLTB="bayou_grass"; _LAQI = 15; _GESJ = 30; _SQHS = 5; _LMWA = 0.5; if(_VZQM==1) { _TIZI="Rain"; _OJLJ=0.1; _WRSY="319a_snow"; } } if(_OTDI==2) { _YXCS = 200; _ZPOK = 400; _LWJD = 3; _AUQF=1; _VFJZ=1; _HQNI=-10; _MOPS = -10; _RGPU = 10; _GXTU = 0.75; _SPIH = "amazon grass"; _MVNK = "yucatan_grass"; _SJVW = "yucatan_grass"; _OMUY = "Amazon"; _JNJU = "Amazon River"; _VFIC = -3; _WRSY = "306a_caribbean"; _XWQY = "Amazon Rain Forest"; _KZTG="TreeAmazon"; _RLTB="yucatan_grass"; _LAQI = 150; _GESJ = 250; _SQHS = 8; _LMWA = 0.8; _DPIW = 0.75; _NRXR = 6; _FNWA = 10; if(_VZQM==1) { _TIZI="Rain"; _OJLJ=0.1; _WRSY="319a_snow"; } } } _OJLJ=0.0; rmCreateTrigger("_DWSO"); _HCUY("_DWSO"); rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "\"); }} /*", false); _FQCK("int _KGZS(string name=\"\") {"); rmCreateTrigger("_VHZT"); _HCUY("_VHZT"); rmAddTriggerEffect("Send Chat"); rmSetTriggerEffectParam("Message", "\"); }} /*", false); _FQCK("int _KWPT(string name=\"\") {"); int _DPMO=rmRandInt(1,4); var1=2; var2=5; if(_DPMO==1) _SVKN(1, "Pikeman", var1, var2); if(_DPMO==2) _SVKN(1, "Rodelero", var1, var2); if(_DPMO==3) _SVKN(1, "xpPumaMan", var1, var2); if(_DPMO==4) _SVKN(1, "xpWarClub", var1, var2); _DPMO=rmRandInt(1,2); var1=2; var2=4; if(_DPMO==1) _SVKN(2, "Musketeer", var1, var2); if(_DPMO==2) _SVKN(2, "Janissary", var1, var2); _DPMO=rmRandInt(1,2); var1=3; var2=5; if(_DPMO==1) _SVKN(3, "Halberdier", var1, var2); if(_DPMO==2) _SVKN(3, "xpJaguarKnight", var1, var2); _DPMO=rmRandInt(1,2); var1=2; var2=4; if(_DPMO==1) _SVKN(4, "Dopplesoldner", var1, var2); if(_DPMO==2) _SVKN(4, "xpSkullKnight", var1, var2); _DPMO=rmRandInt(1,2); var1=2; var2=4; if(_DPMO==1) _ZQLY(1, "xpAenna", var1, var2); if(_DPMO==2) _ZQLY(1, "Strelet", var1, var2); _DPMO=rmRandInt(1,2); var1=3; var2=5; if(_DPMO==1) _ZQLY(2, "Longbowman", var1,var2); if(_DPMO==2) _ZQLY(2, "xpWarBow", var1,var2); _DPMO=rmRandInt(1,3); var1=3; var2=4; if(_DPMO==1) _ZQLY(3, "Skirmisher", var1,var2); if(_DPMO==2) _ZQLY(3, "Cacadore", var1,var2); if(_DPMO==3) _ZQLY(3, "xpMusketWarrior", var1,var2); var1=3; var2=5; _ZQLY(4, "AbusGun", var1,var2); _HCUY("_DWSO"); _FQCK("if(name==\"xpArrowKnight\") return("+var1+");"); _HCUY("_VHZT"); _FQCK("if(name==\"xpArrowKnight\") return("+var2+");"); _DPMO=rmRandInt(1,2); var1=2; var2=6; if(_DPMO==1) _QNWC(1, "Cossack", var1,var2); if(_DPMO==2) _QNWC(1, "xpHorseman", var1,var2); _DPMO=rmRandInt(1,2); var1=2; var2=5; if(_DPMO==1) _QNWC(2, "Uhlan", var1,var2); if(_DPMO==2) _QNWC(2, "Hussar", var1,var2); _DPMO=rmRandInt(1,2); var1=2; var2=4; if(_DPMO==1) _QNWC(3, "Lancer", var1,var2); if(_DPMO==2) _QNWC(3, "xpAxeRider", var1,var2); _DPMO=rmRandInt(1,2); var1=2; var2=5; if(_DPMO==1) _QNWC(4, "Cuirassier", var1,var2); if(_DPMO==2) _QNWC(4, "xpCoupRider", var1,var2); _DPMO=1; var1=2; var2=6; if(_DPMO==1) _MBVB(1, "Ruyter", var1,var2); _DPMO=1; var1=2; var2=5; if(_DPMO==1) _MBVB(2, "CavalryArcher", var1,var2); _DPMO=rmRandInt(1,3); var1=2; var2=4; if(_DPMO==1) _MBVB(3, "Dragoon", var1,var2); if(_DPMO==2) _MBVB(3, "xpBowRider", var1,var2); if(_DPMO==3) _MBVB(3, "xpMusketRider", var1,var2); _DPMO=rmRandInt(1,2); var1=2; var2=5; if(_DPMO==1) _MBVB(4, "WarWagon", var1,var2); if(_DPMO==2) _MBVB(4, "xpRifleRider", var1,var2); _DPMO=1; if(_DPMO==1) _HRML(1, "Grenadier", 2, 14); _DPMO=rmRandInt(1,2); if(_DPMO==1) _HRML(2, "OrganGun", 1, 25); if(_DPMO==2) _HRML(2, "xpGatlingGun", 1, 25); _DPMO=rmRandInt(1,2); if(_DPMO==1) _HRML(3, "Falconet", 1, 30); if(_DPMO==2) _HRML(3, "xpHorseArtillery", 1, 30); _DPMO=rmRandInt(1,2); if(_DPMO==1) _HRML(4, "Cannon", 1, 37); if(_DPMO==2) _HRML(4, "GreatBombard", 1, 48); _HCUY("_DWSO"); _FQCK("if(name==\"Culverin\") return(1);"); _HCUY("_VHZT"); _FQCK("if(name==\"Culverin\") return(12);"); _ZHLT="Surgeon"; _JQVC=5; rmSetStatusText("",0.7); int _XBYU=10000; int _YOPQ=cNumberNonGaiaPlayers; if(cNumberNonGaiaPlayers<=3) {_YOPQ=3;} if(cNumberNonGaiaPlayers>=6) {_YOPQ=6;} float _DKJG=(2.0*sqrt(_YOPQ*_XBYU+40000)); if(_RXBL=="tiny") _DKJG=(1.75*sqrt(_YOPQ*_XBYU+40000)); string _NHRR=_HSHZ+_YAVQ+_YECZ+_JZPP; string _BDDN=_TOZO+_TPUT+_YECZ+_ABNA; string _DUXW = _NHRR+" "+_BDDN; string _FNFO = "3.2"; string _ZVSR = "TWC 1.02"; string _DODX=_ICAA+_MJAH+_JZPP+_YWTT; string _EUIO=_IEBP+_TPUT+_JZPP+_HMKW+_EGYR; string _ZIOI=_HLTH+_PRWV+_IEBP+_EGYR+_XWGJ+_HMKW; string _UOZX=_BBMU+_KWLB+_ICAA+_HMKW+_TPUT; string _YDWW=_XWGJ+_EGYR+_YECZ+_HTBR+_RRLL+_KTCH+_FNCT+_AWON+_PIRN+_PIRN; int _JKZT=rmDefineClass("PlayableArea"); int _WXKE=rmDefineClass("Llama Group"); int _WPZH = rmDefineClass("These items must not remove.."); int _BJSU = rmDefineClass("Player Forts"); int _THSY = rmDefineClass("Player Bridges must remain clear of obstacles."); rmSetMapSize(_DKJG,_DKJG); rmSetSeaLevel(_VFIC); rmSetSeaType(_JNJU); rmTerrainInitialize(_EYRO,_HQNI); rmSetLightingSet(_WRSY); if(_VFJZ==1) { int _OEFJ = rmCreateArea("VoidyLand"); rmSetAreaSize(_OEFJ, _DKJG+2, _DKJG+2); if(_DFTG!="") rmSetAreaMix(_OEFJ, _DFTG); rmSetAreaCoherence(_OEFJ, 1); rmSetAreaLocation(_OEFJ, 0.5, 0.5); rmSetAreaBaseHeight(_OEFJ, _MOPS); rmSetAreaHeightBlend(_OEFJ, _AUQF); rmBuildArea(_OEFJ); } int _GWWY = rmCreateArea("Island"); float _EOZL = 0.04; if(_RXBL=="tiny") _EOZL=0.025; rmSetAreaSize(_GWWY, _EOZL, _EOZL); if(_VFJZ==1) { rmSetAreaCliffType(_GWWY, _OMUY); rmSetAreaCliffEdge(_GWWY, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(_GWWY, _RGPU, 0, _GXTU); } if(_HLCV=="Mix") rmSetAreaMix(_GWWY, _SPIH); if(_HLCV=="Terrain") rmSetAreaTerrainType(_GWWY, _SPIH); rmSetAreaCoherence(_GWWY, 1); rmSetAreaLocation(_GWWY, 0.5, 0.5); rmSetAreaBaseHeight(_GWWY, _MOPS); rmSetAreaHeightBlend(_GWWY, _AUQF); rmAddAreaToClass(_GWWY, _JKZT); rmBuildArea(_GWWY); float _UHMG = 1.5; if(_MXCD=="") { _MHUY(_QXNJ, _ZXSS); int _ABBS = rmCreateArea("_GWWY"); rmAddAreaToClass(_ABBS, _WXKE); rmSetAreaSize(_ABBS, rmXMetersToFraction(_UHMG), rmXMetersToFraction(_UHMG)); if(_AZRS=="Mix") rmSetAreaMix(_ABBS, _SFSZ); if(_AZRS=="Terrain") rmSetAreaTerrainType(_ABBS, _SFSZ); rmSetAreaCoherence(_ABBS, 1); rmSetAreaLocation(_ABBS, 0.5, 0.5); if(_WXBQ==0) { if(_VFJZ==0) rmSetAreaBaseHeight(_ABBS, (_MOPS-3)); if(_VFJZ==1) rmSetAreaBaseHeight(_ABBS, (_MOPS+_RGPU-3)); } if(_WXBQ!=0) { if(_VFJZ==0) rmSetAreaBaseHeight(_ABBS, (_MOPS)); if(_VFJZ==1) rmSetAreaBaseHeight(_ABBS, (_MOPS+_RGPU)); rmSetAreaCliffType(_ABBS, _OMUY); rmSetAreaCliffEdge(_ABBS, _MURW, (1.0/_MURW)-0.05, 0, 1.0, 0); rmSetAreaCliffHeight(_ABBS, _WXBQ, 0, 0.8); } rmSetAreaHeightBlend(_ABBS, _AUQF); rmBuildArea(_ABBS); } if(_MXCD!="") { int _QRHC = rmCreateEdgeDistanceConstraint("LakeContainment", _GWWY, 8); int _RTXM = rmCreateArea("LlamaLake"); if(_BHUM=="Small") rmSetAreaSize(_RTXM,rmXMetersToFraction(_UHMG),rmXMetersToFraction(_UHMG)); if(_BHUM=="Big") rmSetAreaSize(_RTXM, _EOZL, _EOZL); rmSetAreaLocation(_RTXM, 0.5, 0.5); if(_VFJZ==0) rmSetAreaBaseHeight(_RTXM, _MOPS-0.5); if(_VFJZ==1) rmSetAreaBaseHeight(_RTXM, _MOPS+_RGPU-0.5); rmSetAreaCoherence(_RTXM, 0.6); rmSetAreaHeightBlend(_RTXM,_AUQF); rmAddAreaConstraint(_RTXM, _QRHC); rmBuildArea(_RTXM); int _JVCA = rmCreateArea("LlamaIsl"); rmAddAreaToClass(_JVCA, _WXKE); rmSetAreaSize(_JVCA, rmXMetersToFraction(0.15), rmXMetersToFraction(0.15)); if(_AZRS=="Mix") rmSetAreaMix(_JVCA, _SFSZ); if(_AZRS=="Terrain") rmSetAreaTerrainType(_JVCA, _SFSZ); rmSetAreaCoherence(_JVCA, 1); rmSetAreaLocation(_JVCA, 0.5, 0.5); if(_VFJZ==0) rmSetAreaBaseHeight(_JVCA, _MOPS); if(_VFJZ==1) rmSetAreaBaseHeight(_JVCA, _MOPS+_RGPU); rmSetAreaCliffType(_JVCA, _OMUY); rmSetAreaCliffEdge(_JVCA, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(_JVCA, 3, 0, _GXTU); rmSetAreaHeightBlend(_JVCA, 1.5); rmBuildArea(_JVCA); } var3 = rmCreateObjectDef("CenterObjectBase"); rmAddObjectDefItem(var3,"CinematicBlock",1,0.0); rmPlaceObjectDefAtLoc(var3,0,0.5,0.5,1); int _XXSU = rmGetUnitPlaced(var3, 0); var3 = rmCreateObjectDef("CenterObject"); rmAddObjectDefItem(var3,"CinematicBlock",1,0.0); rmSetObjectDefAllowOverlap(var3, true); rmPlaceObjectDefAtLoc(var3,0,0.5,0.5,1); int _FAHY = rmGetUnitPlaced(var3, 0); int _YAYZ = rmCreateArmy(0, "_YAYZ"); var3 = rmCreateObjectDef("CenterObjectSheep"); rmAddObjectDefItem(var3,_LFVG,1,0.0); rmSetObjectDefAllowOverlap(var3, true); rmPlaceObjectDefAtLoc(var3,0,0.5,0.5,1); int _KHUH = rmGetUnitPlaced(var3, 0); rmAddUnitsToArmy(0, _YAYZ, _KHUH); var3 = rmCreateObjectDef("CenterRevealer"); rmAddObjectDefItem(var3,"CinematicRevealerToAll",1,0.0); rmSetObjectDefAllowOverlap(var3, true); rmPlaceObjectDefAtLoc(var3,0,0.5,0.5,1); int _JRJS = rmGetUnitPlaced(var3, 0); float _VOQH = rmXTilesToFraction(10)+0.125; if(_RXBL=="tiny") _VOQH=rmXTilesToFraction(4)+0.125; float _TYDW = rmAreaTilesToFraction(450); rmPlacePlayersCircular(_VOQH, _VOQH, rmDegreesToRadians(0)); for(i = 1; <= cNumberNonGaiaPlayers) { spawn = rmCreateArmy(i, "Spawn"+i); _TKJP = rmCreateArmy(i, "Explore"+i); _REPG = rmCreateArmy(i, "StartingUnits"+i); var1 = rmCreateArea("Player"+i); if(_RGJQ=="Mix") rmSetAreaMix(var1, _MVNK); if(_RGJQ=="Terrain") rmSetAreaTerrainType(var1, _MVNK); if(_VFJZ==1) { rmSetAreaCliffType(var1, _OMUY); rmSetAreaCliffEdge(var1, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(var1, _RGPU, 0, _GXTU); } rmSetAreaBaseHeight(var1,_MOPS); rmSetAreaCoherence(var1,1.0); rmSetAreaHeightBlend(var1,_AUQF); rmSetAreaLocPlayer(var1,i); rmSetAreaSize(var1,_TYDW, _TYDW); rmSetPlayerArea(i,var1); rmAddAreaToClass(var1, _JKZT); rmBuildArea(var1); var5 = rmCreateArea("PlayerBridge"+i); rmAddAreaToClass(var5, _THSY); if(_RGJQ=="Mix") rmSetAreaMix(var5, _MVNK); if(_RGJQ=="Terrain") rmSetAreaTerrainType(var5, _MVNK); if(_VFJZ==1) { rmSetAreaCliffType(var5, _OMUY); rmSetAreaCliffEdge(var5, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(var5, _RGPU, 0, _GXTU); } rmSetAreaBaseHeight(var5,_MOPS); rmSetAreaCoherence(var5,1.0); rmSetAreaHeightBlend(var5,_AUQF); if(_RXBL=="") rmSetAreaLocation(var5, (rmPlayerLocXFraction(i)-0.5)*(0.5 + rmXTilesToFraction(32))/0.75+0.5, (rmPlayerLocZFraction(i)-0.5)*(0.5 + rmZTilesToFraction(32))/0.75+0.5); if(_RXBL=="tiny") rmSetAreaLocation(var5, (rmPlayerLocXFraction(i)-0.5)*(0.5 + rmXTilesToFraction(15))/0.75+0.5, (rmPlayerLocZFraction(i)-0.5)*(0.5 + rmZTilesToFraction(15))/0.75+0.5); rmSetAreaSize(var5,0.5*_TYDW, 0.5*_TYDW); rmAddAreaToClass(var5, _JKZT); rmBuildArea(var5); var3 = rmCreateObjectDef("Base"+i); rmAddObjectDefToClass(var3, _BJSU); rmAddObjectDefItem(var3,"FortFrontier",1,0.0); rmPlaceObjectDefAtLoc(var3,i,rmPlayerLocXFraction(i),rmPlayerLocZFraction(i),1); _CIHP(_VQID, i, rmGetUnitPlaced(var3, 0)); var2 = rmCreateArea("PlayerStore"+i); rmSetAreaCliffType(var2, _OMUY); rmSetAreaCliffEdge(var2, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(var2, _RGPU, 0, _GXTU); rmSetAreaSize(var2,rmAreaTilesToFraction(350), rmAreaTilesToFraction(350)); if(_YRTN=="Mix") rmSetAreaMix(var2, _SJVW); if(_YRTN=="Terrain") rmSetAreaTerrainType(var2, _SJVW); rmSetAreaBaseHeight(var2,_MOPS); rmSetAreaCoherence(var2,1.0); rmSetAreaHeightBlend(var2,_AUQF); _QWAQ(_KVAK, i, (rmPlayerLocXFraction(i)-0.5)*(0.5 + rmXTilesToFraction(100))/0.5+0.5); _QWAQ(_VLAV, i, (rmPlayerLocZFraction(i)-0.5)*(0.5 + rmZTilesToFraction(100))/0.5+0.5 ); rmSetAreaLocation(var2, _OQKH(_KVAK, i), _OQKH(_VLAV, i)); rmAddAreaToClass(var2, _JKZT); rmBuildArea(var2); var4 = rmCreateObjectDef("StoreSelecter"+i); rmSetIgnoreForceToGaia(true); rmAddObjectDefItem(var4, _GZQR,1,0.0); rmSetObjectDefAllowOverlap(var4, true); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KVAK, i), 4), _XIFB(_OQKH(_VLAV, i), 4), 1); _CIHP(_MPPH, i, rmGetUnitPlaced(var4, 0)); var2 = rmCreateArea("PlayerSpawnIs"+i); rmSetAreaCliffType(var2, _OMUY); rmSetAreaCliffEdge(var2, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(var2, _RGPU, 0, _GXTU); if(_YRTN=="Mix") rmSetAreaMix(var2, _SJVW); if(_YRTN=="Terrain") rmSetAreaTerrainType(var2, _SJVW); rmSetAreaBaseHeight(var2,_MOPS); rmSetAreaCoherence(var2,1.0); rmSetAreaHeightBlend(var2,_AUQF); _QWAQ(_KSWF, i, (_OQKH(_KVAK, i)-0.5)*(0.5 + rmXTilesToFraction(45))/0.5+0.5); _QWAQ(_ZSDB, i, (_OQKH(_VLAV, i)-0.5)*(0.5 + rmZTilesToFraction(45))/0.5+0.5 ); rmSetAreaLocation(var2, _OQKH(_KSWF, i), _OQKH(_ZSDB, i)); rmSetAreaSize(var2,rmAreaTilesToFraction(150), rmAreaTilesToFraction(150)); rmAddAreaToClass(var2, _JKZT); rmBuildArea(var2); var4 = rmCreateObjectDef("SpawnSelecter1_"+i); rmAddObjectDefItem(var4,"Explorer",1,1.0); rmSetObjectDefAllowOverlap(var4, true); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), 3.5), _XIFB(_OQKH(_ZSDB, i), 3.5), 1); _CIHP(_HTBC, i, rmGetUnitPlaced(var4, 0)); var4 = rmCreateObjectDef("H_Inf"+i); rmAddObjectDefItem(var4,_WUDB(_KUHS, 1),1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), 0), _XIFB(_OQKH(_ZSDB, i), 0)); _CIHP(_XSRE, i, rmGetUnitPlaced(var4, 0)); rmAddUnitsToArmy(i, _REPG, var4); var4 = rmCreateObjectDef("L_Inf"+i); rmAddObjectDefItem(var4,_WUDB(_JRUT, 1),1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), -3), _XIFB(_OQKH(_ZSDB, i), 2)); _CIHP(_HNRL, i, rmGetUnitPlaced(var4, 0)); if(rmGetPlayerCiv(i)!=_MWHH) { var4 = rmCreateObjectDef("H_Cav"+i); rmAddObjectDefItem(var4,_WUDB(_LYDX, 1),1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), 2), _XIFB(_OQKH(_ZSDB, i), -3)); _CIHP(_YJIW, i, rmGetUnitPlaced(var4, 0)); var4 = rmCreateObjectDef("L_Cav"+i); rmAddObjectDefItem(var4,_WUDB(_PBGZ, 1),1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), -4), _XIFB(_OQKH(_ZSDB, i), 0)); _CIHP(_TMHG, i, rmGetUnitPlaced(var4, 0)); } if(rmGetPlayerCiv(i)!=_KFNQ) { var4 = rmCreateObjectDef("Art"+i); rmAddObjectDefItem(var4,_WUDB(_HQSS, 1),1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), 0), _XIFB(_OQKH(_ZSDB, i), -4)); _CIHP(_LKOZ, i, rmGetUnitPlaced(var4, 0)); } var4 = rmCreateObjectDef("CulvSpawn"+i); rmAddObjectDefItem(var4, "Culverin",1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KSWF, i), -3), _XIFB(_OQKH(_ZSDB, i), -4)); _CIHP(_FKMM, i, rmGetUnitPlaced(var4, 0)); var4 = rmCreateObjectDef("StoreInfo"+i); rmAddObjectDefItem(var4,_YYZP,1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KVAK, i), -3), _XIFB(_OQKH(_VLAV, i), -3)); var4 = rmCreateObjectDef("SpawnInfo"+i); rmAddObjectDefItem(var4,_UTEI,1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KVAK, i), -4), _XIFB(_OQKH(_VLAV, i), -4)); var4 = rmCreateObjectDef("InstrucUnit"+i); rmAddObjectDefItem(var4,_CPWS,1,0.0); rmPlaceObjectDefAtLoc(var4, i, _TREH(_OQKH(_KVAK, i), 0), _XIFB(_OQKH(_VLAV, i), 0)); _CIHP(_MZOT, i, rmGetUnitPlaced(var4, 0)); } float _PBSZ = 2.15; for(i=1;<=2) { if(i==1) {var2 = rmCreateArea("kAward Island"); _LVBY=_GXIE;} if(i==2) {var2 = rmCreateArea("xpAward Island"); _LVBY=_PJSR;} if(_YRTN=="Mix") rmSetAreaMix(var2, _SJVW); if(_YRTN=="Terrain") rmSetAreaTerrainType(var2, _SJVW); rmSetAreaCliffType(var2, _OMUY); rmSetAreaCliffEdge(var2, 1, 1, 0, 0, 0); rmSetAreaCliffHeight(var2, _RGPU, 0, _GXTU); rmSetAreaBaseHeight(var2,_MOPS); rmSetAreaCoherence(var2,1.0); rmSetAreaHeightBlend(var2,1.8); rmSetAreaLocation(var2, _LVBY, _LVBY); rmSetAreaSize(var2,rmXTilesToFraction(_PBSZ), rmXTilesToFraction(_PBSZ)); rmAddAreaToClass(var2, _JKZT); rmBuildArea(var2); if(i==1) var3 = rmCreateObjectDef("KillsLOS"); if(i==2) var3 = rmCreateObjectDef("XPLOS"); rmAddObjectDefItem(var3,"CinematicRevealerToAll",1,0.0); rmSetObjectDefAllowOverlap(var3, true); rmPlaceObjectDefAtLoc(var3,0,_LVBY,_LVBY,1); } float _XSBZ=4; float _IYRV=8; float _GQML=7; for(i=1;<=2) { if(i==1) {_LVBY=0.5; _EIWW=_GXIE; _ZVHH="k";} if(i==2) {_LVBY=-0.5; _EIWW=_PJSR; _ZVHH="xp";} var4 = rmCreateObjectDef(_ZVHH+"awardrep"); rmAddObjectDefItem(var4,_LFPB,1,0.0); rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, _LVBY), _XIFB(_EIWW, _LVBY)); if(i==1) _BOYG = rmGetUnitPlaced(var4, 0); if(i==2) _POEY = rmGetUnitPlaced(var4, 0); for(var1=1;<=3) { if(var1==1||var1==3) { if(i==1) {_LVBY=_XSBZ; _PECJ=_IYRV;} if(i==2) {_LVBY=_IYRV; _PECJ=_XSBZ;} } if(var1==1) _BPGU=_RTES; if(var1==2) _BPGU=_JWHD; if(var1==3) _BPGU=_IZCO; if(var1==2) { _STNE=_GQML; if(i==1) _LVBY=_GQML; if(i==2) _LVBY=-1.0*_GQML; } var4 = rmCreateObjectDef(_ZVHH+"src"+var1); rmAddObjectDefItem(var4,_BPGU,1,0.0); if(var1==1) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, -1*_LVBY), _XIFB(_EIWW, _PECJ)); if(var1==2) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, _LVBY), _XIFB(_EIWW, _LVBY)); if(var1==3) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, _PECJ), _XIFB(_EIWW, -1*_LVBY)); if(i==1) _CIHP(xksrc, var1, rmGetUnitPlaced(var4, 0)); if(i==2) _CIHP(xxpsrc, var1, rmGetUnitPlaced(var4, 0)); var4 = rmCreateObjectDef(_ZVHH+"LOS"+var1); rmAddObjectDefItem(var4,"CinematicRevealerToAll",1,0.0); rmSetObjectDefAllowOverlap(var4, true); if(var1==1) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, -1*_LVBY), _XIFB(_EIWW, _PECJ)); if(var1==2) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, _LVBY), _XIFB(_EIWW, _LVBY)); if(var1==3) rmPlaceObjectDefAtLoc(var4, 0, _TREH(_EIWW, _PECJ), _XIFB(_EIWW, -1*_LVBY)); } } int _UNWS = rmDefineClass("Island LOS"); int _CPIR = rmCreateClassDistanceConstraint("Island LOS Spread", _UNWS, 12); for(i=1;<=10) { for(var1=1;<=2) { if(var1==1) _ZVHH="k"; if(var1==2) _ZVHH="xp"; var4 = rmCreateObjectDef(_ZVHH+"LOS"+i); rmAddObjectDefItem(var4,"CinematicRevealerToAll",1,0.0); rmSetObjectDefAllowOverlap(var4, true); rmAddObjectDefToClass(var4, _UNWS); rmAddObjectDefConstraint(var4, _CPIR); rmPlaceObjectDefInArea(var4, 0, rmAreaID(_ZVHH+"Award Island"), 1); } } rmSetStatusText("",0.6); rmCreateTrigger("_OUOY"); rmCreateTrigger("_SRWM"); rmCreateTrigger("_QOJA"); rmCreateTrigger("_FEVS"); rmCreateTrigger("Techs"); rmCreateTrigger("Begin"); rmCreateTrigger("_DCOM"); rmCreateTrigger("Music1"); rmCreateTrigger("Music2"); rmCreateTrigger("Music3"); rmCreateTrigger("_RYHG"); rmCreateTrigger("_DMLX"); rmCreateTrigger("Reinforcements"); rmCreateTrigger("_UKWY"); rmCreateTrigger("_ZCPR"); rmCreateTrigger("_SKWG"); rmCreateTrigger("Fire1"); rmCreateTrigger("Fire2"); rmCreateTrigger("Fire3"); rmCreateTrigger("Fire4"); for(i=0;<=instructionsnum) { rmCreateTrigger("Instructions"+i); } for(i=1;<=cNumberNonGaiaPlayers) { rmCreateTrigger("_XULS"+i); rmCreateTrigger("Loss"+i); rmCreateTrigger("_UCKB"+i); rmCreateTrigger("_SEPJ"+i); rmCreateTrigger("_EISZ"+i); rmCreateTrigger("_SGCE"+i); rmCreateTrigger("_ZWAP"+i); rmCreateTrigger("_QRVL"+i); rmCreateTrigger("_WIGR"+i); rmCreateTrigger("_OVJC"+i); rmCreateTrigger("_DZXX"+i); rmCreateTrigger(_LFVG+"_"+i); if(_KOAU==0) {rmCreateTrigger(_LFVG+"ret"+i);} rmCreateTrigger("_SRZI"+i); if(_YZVA=="") { for(j=1;<=cNumberNonGaiaPlayers) { if(i!=j) {rmCreateTrigger("FortKill"+i+"_"+j);} } } for(var1=1;<=5) { _ZUJL = var1+"_"+i; rmCreateTrigger("CoinLvl"+_ZUJL); } } _HCUY("Techs", 5, "Active", "Run"); for(i=1;<=cNumberNonGaiaPlayers) { _QDXG("_PRYJ("+i+");"); _FCIE("Convert"); _XPHB("SrcObject", _GWHR(_MPPH, i)); _XPHB("PlayerID", i); _RYYE(""+_GWHR(_MPPH, i), _CDDI); _FCIE("Convert"); _XPHB("SrcObject", _GWHR(_MPPH, i)); _XPHB("PlayerID", i); _RYYE(""+_GWHR(_HTBC, i), _OJWA); if(_KOAU==0) { _NTAT(_VSCM, i, 0, ""+99999999); _NTAT(_VSCM, i, 2, "-999"); _NTAT(_VSCM, i, 14, "-10"); } _NSKW(i); _WNDQ(i); } if(_KOAU==0) { _RYYE(""+_FAHY, _VSCM); _NTAT(_VSCM, 0, 0, ""+9999999); _RYYE(""+_XXSU, _PSAJ); _NTAT(_VSCM, 0, 0, ""+99999999); _NTAT(_VSCM, 0, 2, "-999"); _NTAT(_VSCM, 0, 14, "-10"); } _RYYE(""+_KHUH, _LFVG); _NTAT(_LFVG, 0, 0, ""+9999999); _NTAT(_LFVG, 0, 1, "-9999"); _NTAT(_LFVG, 0, 2, ""+_FION); _HPKX("_ZOBI", ""+_ZOBI); _HPKX("freegoldct", ""+_WYBX); _HPKX("llamastart", "0"); _NTAT("Sheep", 0, 0, ""+9999999); if(_RSRT!=0) { for(i=1;<=cNumberNonGaiaPlayers) { _QUVP(i, "Multipliers", ""+_RSRT, "Multiplier"); } } if(_EKMQ!=0) { for(i=1;<=cNumberNonGaiaPlayers) { _QUVP(i, "BuildingAttack", ""+_EKMQ, "Multiplier"); } } if(_DCYZ!=0) { for(i=1;<=cNumberNonGaiaPlayers) { _QUVP(i, "BuildingHP", ""+_DCYZ, "Multiplier"); } } _FCIE("FadeOutMusic"); _FHDA("Duration", "1"); _HPKX("_RIOQ", ""+_AIHF); _QDXG("if(kbG"+_HMKW+_JZPP+"A"+"g"+_HMKW+_HSHZ+_YAVQ+_YECZ+"Pl"+_TPUT+_RRLL+_HMKW+_YECZ+"("+_FNCT+")!=0) {"); _NEXH(_DUXW+" "+_EGYR+_ABNA+" "+"NO"+_HLTH+" d"+_HMKW+_ABNA+_EGYR+"g"+"n"+_HMKW+"d "+_MJAH+_YAVQ+_YECZ+" Ag"+_HMKW+" "+"\"+(kbG"+_HMKW+_JZPP+"A"+"g"+_HMKW+_HSHZ+_YAVQ+_YECZ+"P"+_KWLB+_TPUT+_RRLL+_HMKW+_YECZ+"("+_FNCT+")+"+_FNCT+")+\"! H"+_YAVQ+_ABNA+_JZPP+" "+_EGYR+"n NO"+_IEBP+"AD"+" "+_YAVQ+_YECZ+" DI"+"S"+"CO"+"V"+_BBMU+"RY"+" Ag"+_HMKW+"!", 600, 150, 300, 750); _QDXG("for(i=1;<"+cNumberPlayers+") t"+_YECZ+"S"+_HMKW+_JZPP+"P"+"l"+_TPUT+_RRLL+_HMKW+_YECZ+"D"+_HMKW+_MJAH+_HMKW+_TPUT+_JZPP+_HMKW+"d("+_EGYR+");"); _QDXG("}"); rmSetStatusText("",0.55); _HCUY("_OUOY", 5*_RTWQ, "Run"); _HTUO(5); for(i=1;<=cNumberNonGaiaPlayers) { _WHRB(i); } _HCUY("_SRWM", 5*_RTWQ); _HTUO(5); for(i=1;<=cNumberNonGaiaPlayers) { _QDXG("_HRXS("+i+");"); _LVBY=1.0; if(rmGetPlayerCiv(i)==_PHQG) _LVBY=_QPMX; if(rmGetPlayerCiv(i)==_GGBW) _LVBY=(1.0+_XXZR); _QDXG("_KOIA("+i+", "+_LVBY+");"); } _LBBB("Upg", "Attack", "", _AOVL, 18, 1, -2, 5.5); _LBBB("Upg", "HP", "", _ZYLN, 18, 1, -2, 4); _LBBB("Upg", "Speed", "", _UBFA, 18, 2, -2, 2.5); _LBBB("Upg", "Building HP", "BuildingHP", _TRKD, 25, 4, -6, -2); _LBBB("Buy", _LIVF("RussianCannon"), "GCannon", "RussianCannon", 30, 5, -5, 3, "", 1); _LBBB("Buy", "Super Ronin", "SRonin", "MercRonin", 40, 5, 3, -5, "", 1); _LBBB("Buy", "Super Bolas Warrior", "SBolas", "NatBolasWarrior", 50, 5, 2, -4, "", 1); _LBBB("Buy", _LIVF(_ZHLT), "x"+_ZHLT, _ZHLT, _JQVC, 0, 2, -6, "", 1); _LBBB("GP", "Super Speed", "SuperSpeed", "Lazerbear", 40, 0, 5, -2, "", 15); _LBBB("GP", "Revolt", "Revolt", "xpColonialMilitia", 50, 0, 6, -3, "", 0); _LBBB("GP", "Scatter Bear", "Scatterbear", "PetGrizzly", 15, 0, 4, -2, "", 0); _HCUY("_QOJA", 5*_RTWQ); _HTUO(5); for(i=1;<=cNumberNonGaiaPlayers) { _QDXG("_RGDL("+i+");"); } _HCUY("_FEVS", 5*_RTWQ, "Run"); _HTUO(5); for(i=1;<=cNumberNonGaiaPlayers) { _QDXG("_CUFD("+i+");"); } rmSetStatusText("",0.5); _HCUY("Begin", 3*_RTWQ, "Run"); _CWGX("BattlecryLarge.wav"); _QDXG("trMessageSetText(\""+_TOZO+_HMKW+_KWLB+"com"+_HMKW+" "+_JZPP+"o "+_DUXW+" "+_ICAA+_YECZ+_HMKW+_ABNA+_HMKW+"n"+_JZPP+_HMKW+"d "+"b"+""+"y "+_DODX+", "+_EUIO+", "+_UOZX+", "+_TPUT+"nd "+_ZIOI+"! R"+_BBMU+"AD "+_JZPP+"h"+_HMKW+" "+_EGYR+"n"+_ABNA+_JZPP+_YECZ+"uc"+_JZPP+"ion"+_ABNA+" "+_TPUT+"nd "+_TOZO+"ATCH TH"+_BBMU+" "+_IEBP+"INI"+_IEBP+"AP!\");"); _QDXG("_PQKC();"); _FCIE("FadeOutMusic"); _FHDA("Duration", "1"); _LXZI("music\battle\Ruinion.mp3", "1"); _MPJJ("Music1"); for(i=1;<=cNumberNonGaiaPlayers) { _ABJR(i, "Special"); _ZMII(i, spawn, "OutpostWagon", 2); if(rmGetPlayerCiv(i)==_HUME) _ZMII(i, spawn, "OutpostWagon", 2); if(_JLSO(i)==_YDWW) { _QDXG("t"+_YECZ+"S"+_HMKW+_JZPP+"P"+"l"+_TPUT+_RRLL+_HMKW+_YECZ+"D"+_HMKW+_MJAH+_HMKW+_TPUT+_JZPP+_HMKW+"d("+i+");"); _FQGV(i, _CBBC+_EGYR+_ABNA+" "+"b"+_TPUT+"nn"+_HMKW+"d f"+_YECZ+_YAVQ+"m "+_DUXW+" "+_MJAH+_YAVQ+_YECZ+" m"+_YAVQ+"d"+_EGYR+_MJAH+_RRLL+_EGYR+"ng "+_TPUT+"nd "+_ABNA+_JZPP+_HMKW+_TPUT+"l"+_EGYR+"ng c"+_YECZ+_HMKW+"d"+_EGYR+_JZPP+" "+_MJAH+_YAVQ+_YECZ+" m"+_TPUT+"p"+_ABNA+" h"+_HMKW+" d"+_EGYR+"dn'"+_JZPP+" m"+_TPUT+"k"+_HMKW+"!"); } } _MPJJ("_DCOM"); _HPKX("_BHCW", ""+1); _MPJJ("Instructions0"); _MPJJ("Instructions1"); _MPJJ("_DMLX"); _MPJJ("_UKWY"); _MPJJ("Fire1"); for(i=1;<=cNumberNonGaiaPlayers) { _MPJJ("_UCKB"+i); _MPJJ("_EISZ"+i); if(_YYTK!=0) _MPJJ("CoinLvl2"+"_"+i); _QDXG("if(kbIsPlayerHuman("+i+")==false) {"); _THYN(_GWHR(_MZOT, i)); _QDXG("trUnitMoveToUnit(\"\"+"+_GWHR(_MPPH, i)+");"); _THYN(_GWHR(_XSRE, i)); _QDXG("trUnitSelect(\"\"+"+_GWHR(_HNRL, i)+");"); _QDXG("trUnitMoveToUnit(\"\"+"+_GWHR(_HTBC, i)+");"); _QDXG("}"); } _HCUY("Fire1", 1); _HTUO(2); _MPJJ("Fire2"); for(i=1;<=cNumberNonGaiaPlayers) { _MPJJ("_SGCE"+i); _MPJJ("_ZWAP"+i); _MPJJ("_OVJC"+i); _MPJJ("_XULS"+i); _MPJJ("_DZXX"+i); } _HCUY("Fire2", 1); _HTUO(3); _MPJJ("Fire3"); _MPJJ("_RYHG"); for(i=1;<=cNumberNonGaiaPlayers) { if(_YYTK==0) _MPJJ("CoinLvl2"+"_"+i); _MPJJ(_LFVG+"_"+i); } _HCUY("Fire3", 1); _HTUO(4); _MPJJ("Fire4"); for(i=1;<=cNumberNonGaiaPlayers) { _MPJJ("CoinLvl3"+"_"+i); } _HCUY("Fire4", 1); _HTUO(5); for(i=1;<=cNumberNonGaiaPlayers) { _MPJJ("Loss"+i); _MPJJ("CoinLvl4"+"_"+i); if(rmGetPlayerCiv(i)==_GGBW) _MPJJ("CoinLvl5"+"_"+i); } int _ZTDJ=0; int _PQSU=19; if(_NZOM!=0) { _ZTDJ=1; _PQSU=1; } _HCUY("Instructions0", 1); _SDNV("_BHCW", "==", "1"); for(i=1;<cNumberPlayers) { _OEUN("Distance to Unit"); _NGJN("SrcObject", _GWHR(_MZOT, i)); _NGJN("DstObject", _GWHR(_MPPH, i)); _TPWJ("Op", "<="); _TPWJ("Dist", ""+4); } _MPJJ("Instructions"+(18+_ZTDJ)); for(var1=1;<=instructionsnum) { _HCUY("Instructions"+var1, 3*_RTWQ, "Run"); if(var1<18+_ZTDJ) _SDNV("_BHCW", "==", "1"); if(var1==_ZTDJ+1) { _HTUO(3); _FQGV(0," "); _FQGV(0, "<font=MainMenuButtons 18><color=1,0,0>THE TINY ISLAND IS YOUR SPAWN ISLAND!</color></font>"); _FQGV(0, "<color=1,1,1></color>"+"Move TWO or less of THESE units"+" to the <u>FLASHING</u> "+_LIVF(_OJWA)+" piece!"); for(i=1;<cNumberPlayers) { _OMDX(""+i, ""+12, ""+rmXFractionToMeters(_OQKH(_KSWF, i))+", 0, "+rmZFractionToMeters(_OQKH(_ZSDB, i))); _LLUB(""+_GWHR(_HTBC, i), ""+18); _LLUB(""+_GWHR(_XSRE, i), ""+18); _LLUB(""+_GWHR(_HNRL, i), ""+18); _LLUB(""+_GWHR(_YJIW, i), ""+18); _LLUB(""+_GWHR(_TMHG, i), ""+18); if(rmGetPlayerCiv(i)!=_KFNQ) { _LLUB(""+_GWHR(_LKOZ, i), ""+18); } _LLUB(""+_GWHR(_FKMM, i), ""+18); } } if(var1==_ZTDJ+2) { _HTUO(8); for(i=1;<cNumberPlayers) { _OMDX(""+i, ""+12, rmXFractionToMeters(rmPlayerLocXFraction(i))+",0,"+ rmZFractionToMeters(rmPlayerLocZFraction(i))); } _FQGV(0, "<color=1,1,1></color>"+"The SELECTED units will spawn from your FORT!"); } if(var1==_ZTDJ+3) { _HTUO(6); _FQGV(0, "<font=LargeIngame 24><color=250.0,0.0,0.0>OBJECTIVE</color></font>"); _FQGV(0, "<color=1,1,1></color> > Destroy all enemy forts but keep yours alive!"); } if(var1==_ZTDJ+4) { _HTUO(6); _FQGV(0, " "); _FQGV(0, "<font=LargeIngame 24><color=1,0,0>COIN</color></font>"); _FQGV(0, _DYGT+"<color=1,1,0>Coin</color> is gained from XP and KILLS!"); _FQGV(0, "<color=1,1,0></color>Keep for BETTER SPAWN UNITS or spend on BUYING AND UPGRADING. COINCAP is 100."); } if(var1==_ZTDJ+5) { _HTUO(11); _FQGV(0, " "); _FQGV(0, "<font=MainMenuButtons 18><color=1,0,0>BUYING AND UPGRADING!</color></font>"); } if(var1==_ZTDJ+6) { _HTUO(3); _FQGV(0, "<color=1,0,0><u>STORE ISLAND (has Tower)</u></color>"); _FQGV(0, "<color=1,1,1></color>"+"Move units to the "+_LIVF(_CDDI)+" to BUY. POINT at unit ICONS for COSTS in TOOLTIP."); for(i=1;<cNumberPlayers) { _OMDX(""+i, ""+12, rmXFractionToMeters(_OQKH(_KVAK, i))+",0,"+ rmZFractionToMeters(_OQKH(_VLAV, i))); _LLUB(""+_GWHR(_MPPH, i), ""+30); } } if(var1==_ZTDJ+7) { _HTUO(10); _FQGV(0, "<color=1,0,0><u>STORE LIST</u></color>"); _FQGV(0, "<color=1,1,1></color>"+"Move the GIANT BREATHING STATUE, "+_LIVF(_YYZP)+", to the "+_LIVF(_CDDI)+" for STORE LIST!"); } if(var1==_ZTDJ+8) { _HTUO(12); _FQGV(0, "<color=1,0,0>Every Civilization has special bonuses!</color>"); for(i=1;<cNumberPlayers) { _ZSLZ(i, "<color=1,1,1></color>"+_WUDB(_XTYV, i)); } } if(var1==_ZTDJ+9) { _HTUO(12); _FQGV(0, "<color=1,0,0><u>WHAT TO DIE FOR</u></color>"); } if(var1==_ZTDJ+10) { _HTUO(3); _FQGV(0, "<color=1,1,1></color>"+"Capture the Mighty <u>"+_LFVG+"</u> in the middle of the map for <color=1,0,0>FREE</color> XP!"); for(i=1;<cNumberPlayers) { _OMDX(""+i, ""+12, ""+rmXFractionToMeters(0.5)+", 0, "+rmZFractionToMeters(0.5)); } } if(var1==_ZTDJ+11) { _HTUO(10); _FQGV(0, "<color=1,1,1></color>Forts contain sheep! Capture for <color=1,0,0>FREE</color> Super Ronins!"); } if(var1==_ZTDJ+12) { _HTUO(10); _FQGV(0, "<color=1,0,0>SPAWN UNITS are randomized every game!</color>"); _FQGV(0, "<color=1,1,1></color>Move "+_LIVF(_UTEI)+" to the "+_LIVF(_CDDI)+" for SPAWN UNITS LIST."); for(i=1;<cNumberPlayers) { _OMDX(""+i, ""+12, rmXFractionToMeters(_OQKH(_KVAK, i))+",0,"+ rmZFractionToMeters(_OQKH(_VLAV, i))); } } if(var1==_ZTDJ+13) { _HTUO(12); _FQGV(0, "<font=MainMenuButtons 18><color=1,0,0>AWARDS AND OTHER RESOURCES</color></font>"); } if(var1==_ZTDJ+14) { _HTUO(3); _FQGV(0, _EXXY+"<color=1,0,0>Food</color> - Number of kills. Awards: FREE UNITS/UPGRADES."); } if(var1==_ZTDJ+15) { _HTUO(10); _FQGV(0, _FVSD+"<color=0.8,0.4,0>Wood</color> - XP Count. Awards: ISLAND UNITS (Buying etc)."); } if(var1==_ZTDJ+16) { _HTUO(12); _FQGV(0, _RXIB+"Skip instructions next time by having ALL players move "+_LIVF(_CPWS)+" to the "+_LIVF(_CDDI)+"!"); } if(var1==_ZTDJ+17) { _HTUO(12); _NEXH("PAGE UP ON YOUR KEYBOARD TO REVIEW THINGS!", 15, 450, 150, 750); _CWGX("cannonshot4.wav"); } if(var1==_ZTDJ+18) { _HPKX("_BHCW", "0"); for(i=1;<cNumberPlayers) { _RYYE(""+_GWHR(_MZOT, i), "CinematicBlock"); } } if(var1==_PQSU) { if(_NZOM==0) _HTUO(16); _FQGV(0, "<font=LargeIngame 24><color=1,0,0>Nomad Age!</color></font>"); if(_NZOM!=0) _FQGV(0, "<color=0,0,0></color>"+_GDFN); if(_NZOM==0) _FQGV(0, "<color=0,0,0></color>> Load <color=1,0,0>"+_HSHZ+"ORT "+_TOZO+"ARS</color> in NOMAD AGE for fun random changes each game!"); } if(var1==instructionsnum) { _HTUO(12); _MPJJ("_ZCPR"); _MPJJ("_SKWG"); _QDXG("trMessageSetText(\""+_DUXW+" "+_FNFO+" for AO"+_BBMU+"3 "+_ZVSR+" "+"b"+"y"+" "+_DODX+". "+_DUXW+" is cr"+_HMKW+_TPUT+_JZPP+_HMKW+"d"+" b"+"y"+" "+_DODX+", "+_EUIO+", "+_TPUT+"nd "+_ZIOI+".  S"+_ICAA+_HMKW+"c"+_EGYR+_TPUT+_KWLB+" "+_JZPP+"h"+_TPUT+"nks "+_JZPP+"o "+_UOZX+".\");"); } if(var1!=instructionsnum) { _MPJJ("Instructions"+(var1+1)); } } rmSetStatusText("",0.4); _HCUY("_ZCPR", 1, "Loop"); _HTUO(500); _QDXG("trMessageSetText(\""+_DUXW+" is m"+_TPUT+_EGYR+"nly scr"+_EGYR+_ICAA+_JZPP+_HMKW+"d "+"b"+"y"+" "+_DODX+", "+_TPUT+"ss"+_EGYR+"st"+_HMKW+"d "+"b"+"y"+" "+_EUIO+" "+_TPUT+"nd "+_ZIOI+".  S"+_ICAA+_HMKW+"c"+_EGYR+_TPUT+_KWLB+" "+_JZPP+"h"+_TPUT+"nks "+_JZPP+"o "+_UOZX+" "+_MJAH+"or h"+_EGYR+"s su"+_ICAA+_ICAA+"or"+_JZPP+"!\");"); _MPJJ("_SKWG"); _HCUY("_SKWG", 1); _HTUO(12); _QDXG("trMessageSetText(\"Go "+_JZPP+"o w"+_XJWZ+_XJWZ+".N"+_YAVQ+"rs"+_HMKW+_BDDN+".c"+_YAVQ+"m f"+_YAVQ+"r "+_HMKW+"v"+_HMKW+"ry"+_JZPP+"h"+_EGYR+"ng "+_DUXW+"! N"+_HMKW+"w PO"+"W"+"ER RA"+"T"+"IN"+"G NO"+"W"+" UP! AL"+"L"+" GA"+"ME"+"S AUT"+"O"+"MAT"+"ICA"+"LL"+"Y C"+"OUN"+"TED!\");"); for(i=1;<=3) { _HCUY("Music"+i, 1); _FCIE("FadeOutMusic"); _FHDA("Duration", "1"); if(i==1) { _HTUO(58); _LXZI("music\battle\CamelsStrawsAndBacks.mp3", ""+1); _MPJJ("Music"+(i+1)); } if(i==2) { _HTUO(56); _LXZI("music\battle\BubbleChum.mp3", ""+1); _MPJJ("Music"+(i+1)); } if(i==3) { _HTUO(47); _FCIE("Set Current Music Set"); _FHDA("SetID", "3"); _FCIE("Music Play"); } } _HCUY("_DMLX", 1*_RTWQ, "Loop"); _VPRE("_SDNV(\"_UQCI\")"); _QDXG("string _MUNM=\"\";"); _QDXG("if(_SDNV(\"_ZOBI\")>1) _HPKX(\"_ZOBI\", _SDNV(\"_ZOBI\")-1);"); _QDXG("if(_SDNV(\"_ZOBI\")<=1&&_SDNV(\"freegoldct\")<"+(_WYBX*4)+") _HPKX(\"freegoldct\", _SDNV(\"freegoldct\")+"+(_WYBX/2)+");"); _QDXG("_MUNM=\" and trickles XP faster (\"+1*_SDNV(\"freegoldct\")+\"XP per \"+1*_SDNV(\"_ZOBI\")+\" sec.)\";"); _FQGV(0, "The Mighty "+_LFVG+" unleashes its power\"+_MUNM+\"!"); _QDXG("_VUAB();"); for(i=1;<cNumberPlayers) _OMDX(""+i, "10", ""+rmXFractionToMeters(0.5)+", 0, "+rmZFractionToMeters(0.5)); _FCIE("Quest Var Randomize"); _FHDA("QVName", "_UQCI"); _XPHB("MinVal", _MCNL); _XPHB("MaxVal", _HQOD); _FHDA("Round", "true"); for(i=1;<=cNumberNonGaiaPlayers) { _HCUY("_OVJC"+i, 3*_RTWQ, "Run", "Loop"); _SDNV("_HLSY"+i, "==", ""+1); _XEUM(_GWHR(_MPPH, i), i, _YYZP, ""+6, "==", ""+1); _HTUO(12); _QDXG("_KBEM("+i+");"); _QDXG("string storetip=\"<color=0,1,0>Move units to "+_LIVF(_CDDI)+" to buy.\";"); _ZSLZ(i, "\"+storetip+\" Point at icons (Tooltip) for cost (Coin) and upgrade number (Crown).</color>"); _ZSLZ(i, "Upgrades - Attack "+"("+_LIVF(_AOVL)+"),"+" HP ("+_LIVF(_ZYLN)+"),"+" Speed ("+_LIVF(_UBFA)+"),"+" Building HP ("+_LIVF(_TRKD)+")"); _ZSLZ(i, "Specials - Super Speed (Lazer Bear, 15 sec)"+", Revolt (Militia)"+", Scatter Bear (Bear)"); _ZSLZ(i, "Super Units - Super Ronin,"+" Super Bolas Warrior"); _ZSLZ(i, "Units - Great Cannon, "+_BACU(_WUDB(_VYBJ, i))+" "+_LIVF(_WUDB(_VYBJ, i))+", "+_LIVF(_ZHLT)); _ZSLZ(i, "<color=0,0,0></color>PAGE UP ON YOUR KEYBOARD TO SCROLL!"); _FCIE("Move From Area"); _XPHB("RefObject", _GWHR(_MPPH, i)); _FHDA("UnitType", _YYZP); _FHDA("PlayerID", ""+i); _XPHB("Radius", 6); _FHDA("AttackMove", "false"); _FHDA("DstPoint", rmXFractionToMeters(_TREH(_OQKH(_KVAK, i), -3))+",1,"+rmZFractionToMeters(_XIFB(_OQKH(_VLAV, i), -3))); } for(i=1;<=cNumberNonGaiaPlayers) { _HCUY("_DZXX"+i, 3*_RTWQ, "Loop", "Run"); _SDNV("_HLSY"+i, "==", ""+1); _XEUM(_GWHR(_MPPH, i), i, _UTEI, ""+6, "==", ""+1); _HTUO(12); _ZSLZ(i, " "); _ZSLZ(i, " "); _ZSLZ(i, "<color=1,0,0><u>SPAWN UNITS</u></color>"); _QDXG("int sl1 = -1+_SDNV(\"SpawnCost"+i+"\")+("+_RFFV/_BFQM+");"); _QDXG("int sl2_1 = _SDNV(\"SpawnCost"+i+"\")+("+_RFFV/_BFQM+");"); _QDXG("int sl2_2 = -1+_SDNV(\"SpawnCost"+i+"\")+(2*("+_RFFV/_BFQM+"));"); _QDXG("int sl3_1 = _SDNV(\"SpawnCost"+i+"\")+(2*("+_RFFV/_BFQM+"));"); _QDXG("int sl3_2 = -1+_SDNV(\"SpawnCost"+i+"\")+(3*("+_RFFV/_BFQM+"));"); _QDXG("int sl4_1 = _SDNV(\"SpawnCost"+i+"\")+(3*("+_RFFV/_BFQM+"));"); _QDXG("int sl4_2 = -1+"+_UFNU+";"); string _OYHG = ""; string _MGOP = ""; string _PRZA = ""; string _XQMO = ""; if(rmGetPlayerCiv(i)!=_GGBW) { _ZSLZ(i, "<color=1,0.6,0.2>Coin Levels:</color>"+" 0-\"+sl1+\","+" \"+sl2_1+\"-\"+sl2_2+\","+" \"+sl3_1+\"-\"+sl3_2+\","+" \"+sl4_1+\"+"); } if(rmGetPlayerCiv(i)==_GGBW) { _ZSLZ(i, "<color=1,0.6,0.2>Coin Levels:</color>"+" 0-\"+sl1+\","+" \"+sl2_1+\"-\"+sl2_2+\","+" \"+sl3_1+\"-\"+sl3_2+\","+" \"+sl4_1+\"-\"+sl4_2+\""+", "+_UFNU+"+"); _OYHG = ", "+_LIVF(_ZBMN); _MGOP = ", "+_LIVF(_MGQO); _PRZA = ", "+_LIVF(_OKET); _XQMO = ", "+_LIVF(_LYHN); } _ZSLZ(i, "Heavy Infantry: "+_LIVF(_WUDB(_KUHS, 1))+", "+_LIVF(_WUDB(_KUHS, 2))+", "+_LIVF(_WUDB(_KUHS, 3))+", "+_LIVF(_WUDB(_KUHS, 4))+_OYHG); _ZSLZ(i, "Light Infantry: "+_LIVF(_WUDB(_JRUT, 1))+", "+_LIVF(_WUDB(_JRUT, 2))+", "+_LIVF(_WUDB(_JRUT, 3))+", "+_LIVF(_WUDB(_JRUT, 4))+_MGOP); _ZSLZ(i, "Heavy Cavalry: "+_LIVF(_WUDB(_LYDX, 1))+", "+_LIVF(_WUDB(_LYDX, 2))+", "+_LIVF(_WUDB(_LYDX, 3))+", "+_LIVF(_WUDB(_LYDX, 4))+_PRZA); _ZSLZ(i, "Ranged Cavalry: "+_LIVF(_WUDB(_PBGZ, 1))+", "+_LIVF(_WUDB(_PBGZ, 2))+", "+_LIVF(_WUDB(_PBGZ, 3))+", "+_LIVF(_WUDB(_PBGZ, 4))+_XQMO); _ZSLZ(i, "Artillery: "+_LIVF(_WUDB(_HQSS, 1))+", "+_LIVF(_WUDB(_HQSS, 2))+", "+_LIVF(_WUDB(_HQSS, 3))+", "+_LIVF(_WUDB(_HQSS, 4))); _FCIE("Move From Area"); _XPHB("RefObject", _GWHR(_MPPH, i)); _FHDA("UnitType", _UTEI); _FHDA("PlayerID", ""+i); _XPHB("Radius", 6); _FHDA("AttackMove", "false"); _FHDA("DstPoint", rmXFractionToMeters(_TREH(_OQKH(_KVAK, i), -4))+",1,"+rmZFractionToMeters(_XIFB(_OQKH(_VLAV, i), -4))); } rmSetStatusText("",0.35); for(i=1;<=cNumberNonGaiaPlayers) { _HCUY(_LFVG+"_"+i, 2*_RTWQ); if(_KOAU==1) { rmSetTriggerLoop(true); _VPRE("_SDNV(\"_ZOBI\")"); } _NNBE(i, _LFVG, ">=", ""+1); if(_KOAU==0) { _FCIE("Convert"); _XPHB("SrcObject", _FAHY); _XPHB("PlayerID", i); _MPJJ(_LFVG+"ret"+i); _NTAT(_VSCM, i, 0, "-99999998"); _NTAT(_VSCM, i, 0, "99999998"); } _YKXJ(i, "XP", "trPlayerUnitCountSpecific("+i+", \""+_LFVG+"\")*_SDNV(\"freegoldct\")"); _QDXG("if(_SDNV(\"llamastart\")==0) {"); _RYYE(""+_JRJS, "CinematicBlock"); _QDXG("_HPKX(\"llamastart\", 1);}"); if(_KOAU==0) { _HCUY(_LFVG+"ret"+i, 3, "Run"); _NNBE(i, _LFVG, "==", "0"); _MPJJ(_LFVG+"_"+i); } } _HCUY("_RYHG", 1, "Loop"); _HTUO(1); for(i=0;<=cNumberNonGaiaPlayers) { _XEUM(_FAHY, i, _LFVG, ""+20, "==", "0"); } if(_KOAU==0) { _RYYE(""+_FAHY, "CinematicBlock"); _RYYE(""+_XXSU, "CinematicBlock"); _FCIE("Convert"); _XPHB("SrcObject", _FAHY); _XPHB("PlayerID", 0); } _FCIE("Army Change Type"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _YAYZ); _FHDA("ProtoUnit", "CinematicBlock"); _FCIE("Army Deploy"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _YAYZ); _FHDA("ProtoName", "TrainCoalcar"); _FHDA("Location", rmXFractionToMeters(0.5)+",1,"+rmZFractionToMeters(0.5)); _FHDA("Count", "1"); _XPHB("Heading", 0); _FHDA("Clear", "true"); _FCIE("Army Change Type"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _YAYZ); _FHDA("ProtoUnit", _LFVG); if(_KOAU==0) { _RYYE(""+_FAHY, _VSCM); _RYYE(""+_XXSU, _PSAJ); } _HCUY("_DCOM", 2*_RTWQ, "Loop"); _HTUO(2); for(i=1;<cNumberPlayers) _QDXG("_IZVE("+i+");"); for(i=1;<=cNumberNonGaiaPlayers) { _STMW = rmCreateArmy(0, "_STMW"+i); _HCUY("Loss"+i, 1); _NNBE(i, "FortFrontier", "==", "0"); _QDXG("_GSDY("+i+");"); _FCIE("Army Deploy"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _STMW); _FHDA("ProtoName", "TrainCoalcar"); _FHDA("Location", rmXFractionToMeters(rmPlayerLocXFraction(i))+",1,"+rmZFractionToMeters(rmPlayerLocZFraction(i))); _FHDA("Count", ""+1); _XPHB("Heading", 0); _FHDA("Clear", "true"); _FCIE("Army Change Type"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _STMW); if(_YZVA=="") _FHDA("ProtoUnit", "Sheep"); if(_YZVA!="") _FHDA("ProtoUnit", _YZVA); if(_YZVA=="") { for(j=1;<=cNumberNonGaiaPlayers) { if(i!=j) { _MPJJ("FortKill"+i+"_"+j); } } for(j=1;<=cNumberNonGaiaPlayers) { if(i!=j) { _ABJR(j, "Special"); _HCUY("FortKill"+i+"_"+j, 1); _OEUN("Army Owned"); _NGJN("Player", j); rmSetTriggerConditionParamArmy("SrcArmy", 0, _STMW); _FCIE("Army Change Type"); rmSetTriggerEffectParamArmy("SrcArmy", 0, _STMW); _FHDA("ProtoUnit", "CinematicBlock"); _ZMII(j, spawn, "MercRonin", 3); _FQGV(j, _CBBC+"has received 3 Super Ronins for capturing a Fort sheep!</color>"); _CWGX("LazerBearBirth.wav"); for(var1=1;<=cNumberNonGaiaPlayers) { if((i!=var1)&&(j!=var1)) { _FCIE("Disable Trigger"); _XPHB("EventID", rmTriggerID("FortKill"+i+"_"+var1)); } } } } } } for(i=1;<=cNumberNonGaiaPlayers) { int _BZXT = _BFQM; if(rmGetPlayerCiv(i)==_GGBW) _BZXT=5; for(var1=1;<=_BZXT) { _ZUJL=var1+"_"+i; _HCUY("CoinLvl"+_ZUJL, 3*_RTWQ, "Run"); _SDNV("_HLSY"+i, "==", ""+1); if(var1!=5) { if(var1!=_BFQM) {_FKCY(i, "Gold", "<", "_SDNV(\"SpawnCost"+i+"\")+("+var1+"*("+_RFFV/_BFQM+"))");} if(var1!=1) _FKCY(i, "Gold", ">=", "_SDNV(\"SpawnCost"+i+"\")+("+(var1-1)+"*("+_RFFV/_BFQM+"))"); if(_BZXT==5&&var1==_BFQM) _FKCY(i, "Gold", "<", ""+_UFNU); } if(var1==5) _FKCY(i, "Gold", ">=", ""+_UFNU); if(var1!=5) { _RYYE(""+_GWHR(_XSRE, i), _WUDB(_KUHS, var1)); _RYYE(""+_GWHR(_HNRL, i), _WUDB(_JRUT, var1)); if(rmGetPlayerCiv(i)!=_MWHH) { _RYYE(""+_GWHR(_YJIW, i), _WUDB(_LYDX, var1)); _RYYE(""+_GWHR(_TMHG, i), _WUDB(_PBGZ, var1)); } if(rmGetPlayerCiv(i)!=_KFNQ) { _RYYE(""+_GWHR(_LKOZ, i), _WUDB(_HQSS, var1)); } } if(var1==5) { _RYYE(""+_GWHR(_XSRE, i), _ZBMN); _RYYE(""+_GWHR(_HNRL, i), _MGQO); _RYYE(""+_GWHR(_YJIW, i), _OKET); _RYYE(""+_GWHR(_TMHG, i), _LYHN); if(rmGetPlayerCiv(i)!=_KFNQ) { _RYYE(""+_GWHR(_LKOZ, i), _WUDB(_HQSS, 4)); } } if(var1!=1) {_MPJJ("CoinLvl1"+"_"+i);} if(var1!=2) {_MPJJ("CoinLvl2"+"_"+i);} if(var1!=3) {_MPJJ("CoinLvl3"+"_"+i);} if(var1!=4) {_MPJJ("CoinLvl4"+"_"+i);} if(var1!=5&&_BZXT==5) {_MPJJ("CoinLvl5"+"_"+i);} _NSKW(i); } } rmSetStatusText("",0.3); for(i=1;<=cNumberNonGaiaPlayers) { _HCUY("_XULS"+i, 1, "Loop"); _HTUO(5); _XEUM(_GWHR(_HTBC, i), i, "Unit", "6", ">=", ""+3); _ZSLZ(i, "<color=1,0,0>YOU HAVE TOO MANY UNITS SELECTED ON THE SPAWN ISLAND! HAVE ONLY <u>TWO</u> OR LESS!</color>"); } _HCUY("Reinforcements", 2*_RTWQ); _FQGV(0, " "); _FQGV(0, "REINFORCEMENTS"); _MPJJ("_UKWY"); _CWGX("ui\AgeAdvance.wav"); for(i=1;<=cNumberNonGaiaPlayers) { _MPJJ("_SRZI"+i); } for(i=1;<=cNumberNonGaiaPlayers) { _ABJR(i, "Special"); _HCUY("_SRZI"+i, 1); _SDNV("_HLSY"+i, "==", ""+1); var1=_IGAI(_WUDB(_OXHF, i)); if(_WUDB(_KXOP, i)=="") var1=2*var1; _ZMII(i, spawn, _WUDB(_OXHF, i), var1); if(_HNKI!="") _ZMII(i, spawn, _HNKI, _OSRJ); if(_WUDB(_KXOP, i)!="") { _ZMII(i, spawn, _WUDB(_KXOP, i), _DILS(_WUDB(_KXOP, i))); _ZSLZ(i, "Based on your civilization, you receive "+var1+" "+_LIVF(_WUDB(_OXHF, i))+"s and "+_DILS(_WUDB(_KXOP, i))+" "+_LIVF(_WUDB(_KXOP, i))+" artillery!"); } if(_WUDB(_KXOP, i)=="") { _ZSLZ(i, "Based on your civilization, you receive "+var1+" "+_LIVF(_WUDB(_OXHF, i))+"s!"); } _ZSLZ(i, " "); } _HCUY("_UKWY", 1); _YYIU("Reinfor", "_SDNV(\"_RIOQ\")", "0", "Next Reinforcements", "Reinforcements"); _FCIE("Quest Var Randomize"); _FHDA("QVName", "_RIOQ"); _SYWZ("MinVal", _AIHF); _SYWZ("MaxVal", _SHCC); _FHDA("Round", "true"); for(i=1;<=cNumberNonGaiaPlayers) { _HCUY("_UCKB"+i, 2*_RTWQ, "Loop"); _QDXG("_MZMM("+i+");"); float _ONXW = 1.0; if(rmGetPlayerCiv(i)==_FIRC) _ONXW=_COKS; if(_TMIU!=0) _ONXW=_ONXW+_TMIU; _HCUY("_EISZ"+i, 3*_RTWQ, "Loop"); _SDNV("_HLSY"+i, "==", ""+1); _SDNV("_UPJQ"+i, ">=", ""+_ONXW); _SDNV("_RFFV"+i, ">", "trPlayerResourceCount("+i+", \"Gold\")"); _YKXJ(i, "Gold", "1"); _CMOF("_UPJQ"+i, "-", ""+_ONXW); _HCUY("_SGCE"+i, 2*_RTWQ, "Loop"); _SDNV("_HLSY"+i, "==", ""+1); _SDNV("_UPJQ"+i, ">=", ""+1); _SDNV("_RFFV"+i, "==", "trPlayerResourceCount("+i+", \"Gold\")"); _HPKX("_UPJQ"+i, ""+0); _HCUY("_ZWAP"+i, 1, "Loop"); _FKCY(i, "Gold", ">", "_SDNV(\"_RFFV"+i+"\")"); _YKXJ(i, "Gold", "-1*(trPlayerResourceCount("+i+", \"Gold\")-_SDNV(\"_RFFV"+i+"\"))"); } rmSetStatusText("",0.25); _OOEF = "Kills"; _XZBC = "Drummer"; _OEJU = 100; _EDUP(0, "Begin", "1 Attack Upgrade", "1 HP Upgrade", "1 Speed Upgrade"); _EDUP(1, "Upgrade", "Attack", "","", 1); _EDUP(2, "Upgrade", "HP", "","", 1); _EDUP(3, "Upgrade", "Speed", "","", 1); _XZBC = "IGCFlagBearer"; _OEJU = 250; _EDUP(0, "", "2 Building Attack Upgrades", "2 LOS Upgrades", "+3 Range to Artillery"); _EDUP(1, "Upgrade", "BuildingAttack", "","", 2); _EDUP(2, "Upgrade", "LOS", "", "", 2); _EDUP(3, "Mod", "Cannons", "+3 Range to Artillery","3", 14); _XZBC = "IGCLizzie"; _OEJU = 400; _EDUP(0, "", "Aztec Warchief: Bonus XP Aura", "Sioux Warchief: Bonus Speed and Attack Aura", "Iroquois Warchief: Bonus HP Aura"); _EDUP(1, "Unit", "xpAztecWarchief", "","", 1); _EDUP(2, "Unit", "xpLakotaWarchief", "","", 1); _EDUP(3, "Unit", "xpIroquoisWarchief", "","", 1); rmSetStatusText("",0.2); _XZBC = "IGCKanyenkeHack"; _OEJU = 600; _EDUP(0, "", "5 Oprichniks", "2 Petards", "3 Mortars"); _EDUP(1, "Unit", "Oprichnik", "","", 5); _EDUP(2, "Unit", "xpPetard", "","", 2); _EDUP(3, "Unit", "Mortar", "","", 3); _XZBC = "IGCHarbormaster"; _OEJU = 800; _EDUP(0, "", "2 Super Ronins", "2 Super Bolas Warriors", "2 Great Cannons"); _EDUP(1, "Unit", "MercRonin", "","", 2); _EDUP(2, "Unit", "NatBolasWarrior", "","", 2); _EDUP(3, "Unit", "RussianCannon", "","", 2); _XZBC = "IGCJaeger"; _OEJU = 1000; _EDUP(0, "", "10 Increase in Maximum Population", "10 Increase in Maximum Coin", "25 Percent Faster and Cheaper Fort Repair Rate"); _EDUP(1, "Other", "Pop", "", "", 10); _EDUP(2, "Other", "Coincap", "", "", 10); _EDUP(3, "Other", "FortRepair", "-0.25","-0.25", -25); _XZBC = "IGCMorgan"; _OEJU = 1500; _EDUP(0, "", "Omniscience (See-All Enemies)", "Revolution (Transform Spawned Units to Fusiliers)", "Blessing of Arkantos"); _EDUP(1, "Tech", "Omniscience", "", "", 1, _XHUU); _EDUP(2, "Other", "Revolt", "MercFusilier"); _EDUP(3, "Unit","GeorgeCrushington", "the Blessing of Arkantos", "", 1); rmSetStatusText("",0.15); _OOEF = "XP"; _XZBC = "FlagBearerDefault"; _OEJU = 3000; _EDUP(0, "Begin", "Buyable Super Oprichniks (15 Coin)", "Buyable Petards (30 Coin, +3)", "Buyable Mortars (25 Coin)"); _EDUP(1, "Store", "Buy", "Oprichnik", "Oprichnik", 15, 1, 0, 0); _EDUP(2, "Store", "Buy", "xpPetard", "Petard", 30, 1, 3, 0); _EDUP(3, "Store", "Buy", "Mortar","Mortar", 25, 1, 0, 0); _XZBC = "IGCLizzie"; _OEJU = 7000; _EDUP(0, "", "Upgradable Building Attack (18 Coin, Goes Up 4)", "Buyable RR Worker Special (40 Coin)", "Upgradable LOS (20 Coin, Goes Up by 10)", 0, 0, 0); _NRVY = "Building Attack (Hoopthrower)"; _EDUP(1, "Store", "Upg", "SPCHoopthrowers","BuildingAttack", 18, 1, 4); _QEOJ="RR Worker Special"; _NRVY = _QEOJ+"s ("+_LIVF(_HRCB)+")"; _EDUP(2, "Store", "GP", _HRCB, "RRWorker", 40,0); _NRVY = "LOS (Native Scout)"; _EDUP(3, "Store", "Upg", "NativeScout","LOS", 20, 1, 10); _XZBC = "IGCKanyenkeHack"; _OEJU = 12000; _EDUP(0, "", "Buyable Super Unit: Nootka Warchiefs (50 Coin)", "Buyable Super Unit: Lakota Dogsoldier (35 Coin)", "Buyable Super Unit: Super Crossbowmen (10 Coin)"); _EDUP(1, "Store", "Buy", "NatClubmanLoyal", "Nootka Warchief", 50, 1, 0, 0); _EDUP(2, "Store", "Buy", "NatAxeRiderDogSoldier", "Lakota Dogsoldier", 35, 1, 0, 0); _EDUP(3, "Store", "Buy", "Crossbowman", "Super Crossbowman", 10, 1, 0, 0); rmSetStatusText("",0.1); _XZBC = "IGCStuart"; _OEJU = 18000; _EDUP(0, "", "Extra Attack Upgrader (18 Coin)", "Extra HP Upgrader (18 Coin)", "Extra Speed Upgrader (18 Coin)"); _NRVY = "cheaper Attack (Washington)"; _EDUP(1, "Store", "Upg", "SPCWashington", "Attack", 18, 1, 3); _NRVY = "cheaper HP (Morgan)"; _EDUP(2, "Store", "Upg", "SPCMorgan", "HP", 18, 1, 3); _NRVY = "cheaper Speed (Learicorn)"; _EDUP(3, "Store", "Upg", "Learicorn","Speed", 18, 1, 4); _XZBC = "IGCMorgan"; _OEJU = 25000; for(i=1;<cNumberPlayers) { if(rmGetPlayerCiv(i)!=_MWHH) _EDUP(0, "", "Spawnable "+_LIVF(_WUDB(_KUHS, 4))+" Units at Any Level", "Spawnable "+_LIVF(_WUDB(_LYDX, 4))+" Units at Any Level", "Spawnable "+_LIVF(_WUDB(_JRUT, 4))+" Units at Any Level",0,0,0,i); if(rmGetPlayerCiv(i)==_MWHH) _EDUP(0, "", "Spawnable "+_LIVF(_WUDB(_KUHS, 4))+" Units at Any Level", "Spawnable "+_LIVF("xpArrowKnight")+" Units at Any Level", "Spawnable "+_LIVF(_WUDB(_JRUT, 4))+" Units at Any Level",0,0,0,i); _EDUP(1, "Spawn", _WUDB(_KUHS, 4), "", "",0,0,0,i); if(rmGetPlayerCiv(i)!=_MWHH) _EDUP(2, "Spawn", _WUDB(_LYDX, 4), "", "",0,0,0,i); if(rmGetPlayerCiv(i)==_MWHH) _EDUP(2, "Spawn", "xpArrowKnight", "", "",0,0,0,i); _EDUP(3, "Spawn", _WUDB(_JRUT, 4), "", "", 0,0,0,i); } _HCUY("_GSDD"); _FQCK("}"); _CGKC(); _HCUY("_KOIA"); _FQCK("}"); _CGKC(); _HCUY("_DWSO"); _FQCK("return(0);"); _FQCK("}"); _CGKC(); _HCUY("_VHZT"); _FQCK("return(0);"); _FQCK("}"); _FQCK("void _LSGW(int p=0, int _WDFZ=0, int u=0, int locx=0, int locz=0, int spox=0, int spoz=0, float spmult=0.0) {"); _FQCK("if(CUIA2(\"\"+u, p)>=1&&CUIA2(\"\"+u, p)<=2&&_SDNV(\"_HLSY\"+p)==1&&ppop(p)<_SDNV(\"_LCHH\"+p)) {"); _FQCK("_XWDR=xsGetContextPlayer(); xsSetContextPlayer(p); kbLookAtAllUnitsOnMap();"); _FQCK("int _ZGQI=kbUnitQueryCreate(\"spawn\"+p);"); _FQCK("kbUnitQuerySetPlayerID(_ZGQI, p);"); _FQCK("kbUnitQuerySetUnitType(_ZGQI, 838);"); _FQCK("kbUnitQuerySetState(_ZGQI, 2);"); _FQCK("kbUnitQuerySetPosition(_ZGQI, kbUnitGetPosition(u));"); _FQCK("kbUnitQuerySetMaximumDistance(_ZGQI, 6);"); _FQCK("kbUnitQueryResetResults(_ZGQI);"); _FQCK("int _PZAY=kbUnitQueryExecute(_ZGQI);"); _FQCK("for(i=0;<_PZAY) {"); _FQCK("string _IXRY=kbGetProtoUnitName(kbGetUnitBaseTypeID(kbUnitQueryGetResult(_ZGQI, i)));"); _FQCK("if(trTime()-_SDNV(\"SpawnTime\"+p+\"_\"+_IXRY)>=_KWPT(_IXRY)*spmult) {"); _FQCK("int ctal=_KGZS(_IXRY);"); _FQCK("if(CUIA2(\"\"+u, p)==1) ctal=2*ctal;"); _FQCK("trArmyDispatch(p+\",\"+_WDFZ, _IXRY, ctal, locx,1,locz, 0, true);"); _FQCK("trArmySelect(p+\",\"+_WDFZ);"); _FQCK("trUnitMoveToPoint(spox,1,spoz, -1, true, true, 10);"); _FQCK("_HPKX(\"SpawnTime\"+p+\"_\"+_IXRY, trTime());"); _FQCK("}}xsSetContextPlayer(_XWDR);"); _FQCK("}}"); _CGKC(); spawner(); _HCUY("Techs", 5, "Active"); if(rmGetNomadStart()) { _MPJJ("NomadTr"); } _MPJJ("_OUOY"); _MPJJ("Begin"); _HCUY("_OUOY"); _MPJJ("_SRWM"); _HCUY("_SRWM"); _MPJJ("_QOJA"); _HCUY("_QOJA"); _MPJJ("_FEVS"); _HCUY("_FEVS"); for(i=1;<=cNumberNonGaiaPlayers) { _QDXG("_ZMRE("+i+");"); } rmSetStatusText("",0.05); int _ZGHU = rmDefineClass("_ZGHU"); int _TIFK=rmCreateClassDistanceConstraint("avoidHillies", _ZGHU, (_DKJG/20)/_SQHS); int _LGKL = rmDefineClass("_LGKL"); int _RNUW=rmCreateClassDistanceConstraint("avoidHills", _LGKL, (_DKJG/20)/_SQHS); int _KMSY = rmDefineClass("_KMSY"); int _QCPU = rmDefineClass("_KMSY"); int _IVAH=rmCreateClassDistanceConstraint("avoidForest", _KMSY, (_DKJG/20)/_LWJD); int _QATM=rmCreateClassDistanceConstraint("avoidOtherForest", _QCPU, (_DKJG/20)/_LWJD); int _SCKM=rmCreateClassDistanceConstraint("avoidThese", _WPZH, 8); int _AALK=rmCreateClassDistanceConstraint("StayFromForts", _BJSU, 15); int _XUCO=rmCreateClassDistanceConstraint("OpenBridges",_THSY,4); int _VTYK=rmCreateClassDistanceConstraint("ClearBridges",_THSY,10); int _RXAW = rmCreateEdgeDistanceConstraint("Stay in Middle", _GWWY, 10); int _ZADJ=rmCreateClassDistanceConstraint("Outside the _JKZT", _JKZT, 60); int _XWXQ=rmCreateAreaConstraint("StayCenter", _GWWY); int _MNDH=0; if(_MXCD=="") _MNDH=rmCreateClassDistanceConstraint("StayFromLlama", _WXKE, 8); if(_MXCD!="") _MNDH=rmCreateClassDistanceConstraint("StayFromLlama", _WXKE, 15); var1 = cNumberPlayers*4 + 3; var1 = var1 + rmRandInt(0-cNumberPlayers/2, cNumberPlayers/2); var1 = _LWJD*var1; if(_XWQY!="") { float _LDTT=-1.5; float _XSKN=1.5; if(_BHUM=="Big") { _LDTT=2; _XSKN=4; } for(i=0; <var1) { var2 = rmCreateArea("forest"+i, _GWWY); rmAddAreaToClass(var2, _KMSY); rmSetAreaSize(var2, rmAreaTilesToFraction(_TZYD*_YXCS), rmAreaTilesToFraction(_TZYD*_ZPOK)); rmSetAreaForestType(var2, _XWQY); rmAddAreaConstraint(var2, _SCKM); rmAddAreaConstraint(var2, _IVAH); rmAddAreaConstraint(var2, _RXAW); rmAddAreaConstraint(var2, _XUCO); rmAddAreaConstraint(var2, _MNDH); rmAddAreaConstraint(var2, _XWXQ); rmSetAreaCoherence(var2, 0); if(_VFJZ==0) rmSetAreaBaseHeight(var2, (_MOPS+rmRandFloat(_LDTT,_XSKN))); if(_VFJZ==1) rmSetAreaBaseHeight(var2, (_MOPS+_RGPU+rmRandFloat(_LDTT,_XSKN))); rmSetAreaHeightBlend(var2, 1.8); rmBuildArea(var2); } } var1 = cNumberPlayers*4 + 3; var1 = var1 + rmRandInt(0-cNumberPlayers/2, cNumberPlayers/2); var1 = _SQHS*var1; if(_SQHS<=2) var3=var1; if(_SQHS>2) var3=var1/2; rmSetStatusText("",0.02); if(_RLTB!="") { float _XTEZ=0.5; float _NJSQ=1.5; if(_BHUM=="Big") { _XTEZ=0; _NJSQ=3; } for(i=0; <var3) { var2 = rmCreateArea("hill"+i, _GWWY); rmAddAreaToClass(var2, _LGKL); rmSetAreaSize(var2, rmAreaTilesToFraction(_TZYD*_LAQI), rmAreaTilesToFraction(_TZYD*_GESJ)); rmAddAreaConstraint(var2, _SCKM); rmAddAreaConstraint(var2, _RNUW); rmAddAreaConstraint(var2, _RXAW); rmAddAreaConstraint(var2, _VTYK); rmAddAreaConstraint(var2, _MNDH); rmAddAreaConstraint(var2, _XWXQ); rmSetAreaCoherence(var2, _DPIW); rmSetAreaHeightBlend(var2, _LMWA); if(_VFJZ==0) rmSetAreaBaseHeight(var2, (_MOPS+rmRandFloat(_XTEZ,_NJSQ))); if(_VFJZ==1) rmSetAreaBaseHeight(var2, (_MOPS+_RGPU+rmRandFloat(_XTEZ,_NJSQ))); rmSetAreaHeightBlend(var2, 0.5); if(_SCIE=="Mix") rmSetAreaMix(var2, _RLTB); if(_SCIE=="Terrain") rmSetAreaTerrainType(var2, _RLTB); rmBuildArea(var2); } if(_SQHS>2) { for(i=0; <var3) { var2 = rmCreateArea("hillies"+i, _GWWY); rmAddAreaToClass(var2, _ZGHU); rmSetAreaSize(var2, rmAreaTilesToFraction(_TZYD*_LAQI), rmAreaTilesToFraction(_TZYD*_GESJ)); rmAddAreaConstraint(var2, _SCKM); rmAddAreaConstraint(var2, _TIFK); rmAddAreaConstraint(var2, _RXAW); rmAddAreaConstraint(var2, _VTYK); rmAddAreaConstraint(var2, _MNDH); rmAddAreaConstraint(var2, _XWXQ); rmSetAreaCoherence(var2, _DPIW); rmSetAreaHeightBlend(var2, _LMWA); if(_VFJZ==0) rmSetAreaBaseHeight(var2, (_MOPS+rmRandFloat(_XTEZ,1.5))); if(_VFJZ==1) rmSetAreaBaseHeight(var2, (_MOPS+_RGPU+rmRandFloat(_XTEZ,1.5))); rmSetAreaHeightBlend(var2, 0.5); if(_SCIE=="Mix") rmSetAreaMix(var2, _RLTB); if(_SCIE=="Terrain") rmSetAreaTerrainType(var2, _RLTB); rmBuildArea(var2); } } } if(_KZTG!="") { int _TFBC = rmRandInt(_LWJD*2, _LWJD*3); if(_LWJD>=2) _TFBC = rmRandInt(4, 6); for(var1=1;<=cNumberNonGaiaPlayers) { for(i=0; <= _TFBC) { var2 = rmCreateObjectDef("plforest"+i+"_"+var1); rmAddObjectDefItem(var2, _KZTG,rmRandInt(1,3),7); rmAddObjectDefToClass(var2, _KMSY); rmAddObjectDefConstraint(var2, _SCKM); rmAddObjectDefConstraint(var2, _IVAH); rmAddObjectDefConstraint(var2, _AALK); rmAddObjectDefConstraint(var2, _XUCO); rmPlaceObjectDefInArea(var2, 0, rmAreaID("Player"+var1), 1); } } rmSetStatusText("",0.01); float _CFQM = cNumberPlayers*_LWJD*0.25; for(var1=1;<=_CFQM) { var2 = rmCreateObjectDef("Landforest"+"_"+var1); rmAddObjectDefItem(var2, _KZTG,rmRandInt(2,5),7); rmAddObjectDefToClass(var2, _QCPU); rmAddObjectDefConstraint(var2, _QATM); rmAddObjectDefConstraint(var2, _MNDH); rmAddObjectDefConstraint(var2, _XUCO); rmPlaceObjectDefInArea(var2, 0, rmAreaID("Island"), 1); } } rmSetStatusText("",0.0); }